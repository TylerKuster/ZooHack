// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreLocation;
@import CoreBluetooth;
@import CoreData;
@import Foundation;
@import Dispatch;
@import HealthKit;
@import CoreGraphics;
@import UIKit;
@import WebKit;
@import SystemConfiguration;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AccountQuery;
@class User;
@class NSError;
@class FlybitsRequest;
@class NSData;
@class ZonesQuery;
@class Zone;
@class Pager;
@class UsersQuery;
@class TagQuery;
@class Tag;
@class VisibleTag;
@class MomentQuery;
@class Moment;
@class MomentAuthorizationResponse;
@class DeviceQuery;
@class Image;
@class NSLocale;
enum ImageSize : NSInteger;
@class UIImage;
@class ImageMetadata;
@class PushQuery;
@class PushMessage;


/// APIManager is a wrapper for use with Objective-C based projects.
///
/// All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
SWIFT_CLASS("_TtC10FlybitsSDK10APIManager")
@interface APIManager : NSObject

/// Registers a new account with the connected Flybits tennant.
///
/// \param query An <code>AccountQuery
/// </code> object that includes the user's email, first and last name and a password.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)register:(AccountQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Updates the user profile of the currently logged in user.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)updateDetailsWithCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Updates the email address of the currently logged in user.
///
/// \param newEmail The user's new email address.
///
/// \param password The user's password.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)updateEmail:(NSString * _Nonnull)newEmail password:(NSString * _Nonnull)password withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Updates the profile image of the currently logged in user with an URL
///
/// \param newImageURL The URL of the new image to upload.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)updateImageWithURL:(NSString * _Nonnull)newImageURL withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Updates the password of the currently logged in user.
///
/// \param oldPassword The user's existing password.
///
/// \param newPassword The user's desired password.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)updatePassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword withCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Sends the user an email to reset his/her password.
///
/// \param email Email of the acccount whose password to be resetted
///
/// \param completion on success error will be nil, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)forgotPassword:(NSString * _Nonnull)email completion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Login with email address and password.
///
/// \param email Email address of the user.
///
/// \param password Password of the user.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)login:(NSString * _Nonnull)email password:(NSString * _Nonnull)password rememberMe:(BOOL)rememberMe withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Login using third party authorization: Open Authentication (OAuth)
///
/// \param oAuthToken Token returned from oAuth server.
///
/// \param isOauthToken Is it an OAuth token from a third party?
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)login:(NSString * _Nonnull)token isOauthToken:(BOOL)isOauthToken rememberMe:(BOOL)rememberMe withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Login using third party authorization: Security Assertion Markup Language (SAML)
///
/// \param provider Name of the authorization provider.
///
/// \param token Token returned by authorization server.
///
/// \param signature Base 64 encoded bytes of the signature which validates the token.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)login:(NSString * _Nonnull)provider token:(NSString * _Nonnull)token signature:(NSData * _Nonnull)signature fetchUserProfile:(BOOL)fetchUserProfile withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Logs out the current user from this device.
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)logoutWithCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Makes a query to retreive zones.
///
/// \param query ZoneQuery The Query object. Includes criteria to use for querying.
///
/// \param withCompletion callback that returns Array of <code>Zone
/// </code>s with pagination, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)zonesQuery:(ZonesQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable zones, Pager * _Nullable paging, NSError * _Nullable error))completion;

/// Requests a specific Zone by ID.
///
/// \param zoneID The ID of the Zone to retrieve.
///
/// \param withCompletion callback that returns Array of <code>Zone
/// </code>s with pagination, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getZone:(NSString * _Nonnull)zoneID withCompletion:(void (^ _Nonnull)(Zone * _Nullable zone, NSError * _Nullable error))completion;

/// Favourite or Unfavourite a zone.
///
/// \param zoneID The ID of the Zone object which you want to favourite
///
/// \param favourite true, will favourite the zone, false will unfavourite the zone
///
/// \param completion Success when the action is successfully completed, Error when an error occurs.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)favouriteAction:(NSString * _Nonnull)zoneID favourite:(BOOL)favourite withCompletion:(void (^ _Nonnull)(BOOL success, NSError * _Nullable error))completion;

/// Get list of zones that are favourited by the current user.
///
/// \param withCompletion callback that returns Array of <code>Zone
/// </code>s with pagination, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getFavouriteZonesWithCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable zones, Pager * _Nullable paging, NSError * _Nullable error))completion;

/// Get list of zones that are created by the current user.
///
/// \param withCompletion callback that returns Array of <code>Zone
/// </code>s with pagination, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getMyZonesWithCompletion:(void (^ _Nonnull)(NSArray<Zone *> * _Nullable zones, Pager * _Nullable paging, NSError * _Nullable error))completion;

/// Creates a Zone on the server with the provided object.
///
/// \param zone The <code>Zone
/// </code> to register with the server.
///
/// \param withCompletion callback that returns a <code>Zone
/// </code> on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)createZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable zone, NSError * _Nullable error))completion;

/// Updates an existing Zone with the server.
///
/// \param zone The <code>Zone
/// </code> to update on the server.
///
/// \param withCompletion callback that returns a <code>Zone
/// </code> on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)updateZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable zone, NSError * _Nullable error))completion;

/// Deletes an existing Zone on the server.
///
/// \param zoneID The unique identifier of a <code>Zone
/// </code> to delete from the server.
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)deleteZone:(NSString * _Nonnull)zoneID withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;

/// Publishes an existing Zone.
///
/// \param zone An existing <code>Zone
/// </code> to be published.
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)publishZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable zone, NSError * _Nullable error))completion;

/// Unpublishes an existing Zone.
///
/// \param zone An existing <code>Zone
/// </code> to be unpublished.
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)unpublishZone:(Zone * _Nonnull)zone withCompletion:(void (^ _Nonnull)(Zone * _Nullable zone, NSError * _Nullable error))completion;

/// Retrieves the details of the currently logged in user.
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getSelfWithCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Retrieves the details of a specified user. When nil is passed in for userID, current logged in user info is returned
///
/// \param userID the id of the user or <code>nil
/// </code> to get current logged in user
///
/// \param withCompletion A callback containing a user object on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getUser:(NSString * _Nullable)userID withCompletion:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Retrieves the details of a list of specified users.
///
/// \param query A users query that includes user IDs plus additional search criteria
///
/// \param withCompletion A callback containing a list of user objects on success, an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getUsers:(UsersQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<User *> * _Nullable user, Pager * _Nullable pager, NSError * _Nullable error))completion;

/// Disables the currently logged in user.
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)disableUserWithCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Asks the server to remember the current user's session
///
/// \param withCompletion A callback containing an error if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)rememberMeWithCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Get list of tags based on TagQuery, options include retrieving a list of all tags mapped to zones / moments, searching for tags with a specific value or retrieving a list of tags associated with a list of zone IDs.
///
/// \param query <code>TagQuery
/// </code> that should be matched when getting tags.
///
/// \param withCompletion <code>tags
/// </code> - An array of tags that satisfies the conditions set by the <code>query
/// </code>.<br />
/// <code>pagination
/// </code> - Number of tags returned and total tags available.<br />
/// <code>error
/// </code> - Any network / server errors.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)tagAction:(TagQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Tag *> * _Nullable tags, Pager * _Nullable pagination, NSError * _Nullable error))completion;

/// Get list of tags based on TagQuery, options include retrieving a list of all tags mapped to zones / moments, searching for tags with a specific value or retrieving a list of tags associated with a list of zone IDs.
///
/// NOTE: Visible tags add an additional parameter <code>visibility
/// </code> to control whether or not this tag is displayed in the client.
///
/// \param query <code>TagQuery
/// </code> that should be matched when getting tags
///
/// \param withCompletion <code>tags
/// </code> - An array of tags that satisfies the conditions set by the <code>query
/// </code>.<br />
/// <code>pagination
/// </code> - Number of tags returned and total tags available.<br />
/// <code>error
/// </code> - Any network / server errors.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)visibleTagAction:(TagQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<VisibleTag *> * _Nullable tags, Pager * _Nullable pagination, NSError * _Nullable error))completion;

/// Retrieves a specific tag with a given tag id.
///
/// \param tagID The id of the tag to retrieve.
///
/// \param withCompletion A completion that returns a <code>Tag
/// </code> on success, error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getTag:(NSString * _Nonnull)tagID withCompletion:(void (^ _Nonnull)(Tag * _Nullable tag, NSError * _Nullable error))completion;

/// Retrieves a specific tag with a given tag id.
///
/// NOTE: Visible tags add an additional parameter <code>visibility
/// </code> to control whether or not this tag is displayed in the client.
///
/// \param tagID The id of the tag to retrieve.
///
/// \param withCompletion A completion that returns a <code>VisibleTag
/// </code> on success, error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getVisibleTag:(NSString * _Nonnull)tagID withCompletion:(void (^ _Nonnull)(VisibleTag * _Nullable tag, NSError * _Nullable error))completion;

/// Get list of zone moments based on MomentQuery.
///
/// \param query <code>MomentQuery
/// </code> that should be satisfied when getting list of moments
///
/// \param withCompletion Callback with a list of moments as well as paging and error information if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nullable)getMoments:(MomentQuery * _Nonnull)query completion:(void (^ _Nonnull)(NSArray<Moment *> * _Nonnull moments, Pager * _Nullable pagination, NSError * _Nullable error))completion;

/// Get detail of a moment using momentID.
///
/// \param momentID id of the <code>Moment
/// </code>
///
/// \param withCompletion <code>moment
/// </code>: instance of <code>Moment
/// </code> with <code>moment.id = momentID
/// </code>.<br />
/// <code>error
/// </code>: Any error occured while making this request.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)momentDetail:(NSString * _Nonnull)momentID withCompletion:(void (^ _Nonnull)(Moment * _Nullable moment, NSError * _Nullable error))completion;

/// Automatically gets authorization and validates the moment so data can be retrieved from the moment.
///
/// \param moment MomentInstance that you want to retrieve the data from
///
/// \param completion <code>validated
/// </code>: weather or not the moment was validated.<br />
/// <code>error
/// </code>: Any error occured while making this request.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)momentAutoValidate:(Moment * _Nonnull)moment completion:(void (^ _Nonnull)(BOOL validated, NSError * _Nullable error))completion;

/// Validates the authorization payload for the moment
///
/// \param moment a moment instance's authorization payload that should be validated before the data can be retrieved.
///
/// \param authorization MomentAuthorizationResponse returned by the <code>momentAuthorization
/// </code> function.
///
/// \param completion <code>validated
/// </code>: weather or not the moment was validated.<br />
/// <code>error
/// </code>: Any error occured while making this request.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)momentValidate:(Moment * _Nonnull)moment authorization:(MomentAuthorizationResponse * _Nonnull)authorization completion:(void (^ _Nonnull)(BOOL validated, NSError * _Nullable error))completion;

/// Get authorization payload data so data can be retrieved from the moment. This payload should be verified using the momentValidate function.
///
/// \param momentID Moment.identifier of a Moment.
///
/// \param completion <code>authorization
/// </code>: A payload containing access for this moment.<br />
/// <code>error
/// </code>: Any error occured while making this request.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)momentAuthorization:(NSString * _Nonnull)momentID completion:(void (^ _Nonnull)(MomentAuthorizationResponse * _Nullable authorization, NSError * _Nullable error))completion;

/// Connects to a specified zone or moment.
///
/// \param query A device query identifying the request as a Zone or Moment applicable request along with the id and device id.
///
/// \param withCompletion A completion that returns errors if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)deviceConnect:(DeviceQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Disconnects to a specified zone or moment.
///
/// \param query A device query identifying the request as a Zone or Moment applicable request along with the id and device id.
///
/// \param withCompletion A completion that returns errors if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)deviceDisconnect:(DeviceQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Downloads a specified image at full size using the default locale.
///
/// \param image A metadata object containing various information about the image.
///
/// \param withCompletion A closure returning an image ID and an NSData object on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadRawImage100:(Image * _Nonnull)image withCompletion:(void (^ _Nonnull)(NSData * _Nullable rawData, NSError * _Nullable error))completion;

/// Downloads a specified image at full size using an optional locale.
///
/// \param image A metadata object containing various information about the image.
///
/// \param locale The desired locale for the image.
///
/// \param withCompletion A closure returning an image ID and an NSData object on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadRawImage100ForLocale:(Image * _Nonnull)image locale:(NSLocale * _Nullable)locale withCompletion:(void (^ _Nonnull)(NSData * _Nullable rawData, NSError * _Nullable error))completion;

/// Downloads a specified image using an optional locale and size.
///
/// \param image A metadata object containing various information about the image.
///
/// \param locale The desired locale for the image.
///
/// \param imageSize The desired size of the image.
///
/// \param withCompletion A closure returning an image ID and an NSData object on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadRawImage:(Image * _Nonnull)image locale:(NSLocale * _Nullable)locale imageSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(NSData * _Nullable rawData, NSError * _Nullable error))completion;

/// Downloads a specified image at full size using the default locale.
///
/// \param image A metadata object containing various information about the image.
///
/// \param withCompletion A closure returning an instantiated UIImage on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadImage100:(Image * _Nonnull)image withCompletion:(void (^ _Nonnull)(UIImage * _Nullable image, NSError * _Nullable error))completion;

/// Downloads a specified image at full size using an optional locale.
///
/// \param image A metadata object containing various information about the image.
///
/// \param locale The desired locale for the image.
///
/// \param withCompletion A closure returning an instantiated UIImage on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadImage100ForLocale:(Image * _Nonnull)image locale:(NSLocale * _Nullable)locale withCompletion:(void (^ _Nonnull)(UIImage * _Nullable image, NSError * _Nullable error))completion;

/// Downloads a specified image using an optional locale and size.
///
/// \param image A metadata object containing various information about the image.
///
/// \param locale The desired locale for the image.
///
/// \param imageSize The desired size of the image.
///
/// \param withCompletion A closure returning an instantiated UIImage on success, an error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)downloadImage:(Image * _Nonnull)image locale:(NSLocale * _Nullable)locale imageSize:(enum ImageSize)imageSize withCompletion:(void (^ _Nonnull)(UIImage * _Nullable image, NSError * _Nullable error))completion;

/// Uploads a remote image to Flybits' servers.
///
/// \param URL The location of the remote image.
///
/// \param withCompletion A closure containing the image information returned by the server on success, error on failure.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)uploadFlybitsImageFromURL:(NSString * _Nonnull)URL withCompletion:(void (^ _Nonnull)(ImageMetadata * _Nullable result, NSError * _Nullable error))completion;

/// Get tenant specific settings from Flybits. Each tenant can define their own key-value pair of settings from the ExperienceStudio and which can be retrieved from mobile to configure the app to behave certain way.
///
/// \param withCompletion A closure containing the result returned by the server (<code>Dictionary
/// </code>), error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getTenantSettingsWithCompletion:(void (^ _Nonnull)(NSDictionary * _Nullable setting, NSError * _Nullable error))completion;

/// Sends properly formatted, custom context data to Flybits' context servers.
///
/// \param contextData A properly formatted dictionary of data intended for Flybits' context servers.
///
/// \param withCompletion A completion that returns errors if applicable.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)sendContextData:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)contextData withCompletion:(void (^ _Nonnull)(NSError * _Nullable error))completion;

/// Retrieves a list of APNS notifications that have been sent to this device.
///
/// \param query A <code>PushQuery
/// </code> specifying any filtering options desired.
///
/// \param withCompletion A completion that returns a list of messages matching the provided query with pagination, an empty list and an error otherwise.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
+ (FlybitsRequest * _Nonnull)getNotificationHistory:(PushQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<PushMessage *> * _Nonnull messages, Pager * _Nullable pager, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSHTTPURLResponse;


/// Controls subscriptions to APNS topics. Convenience functions exist in Zone, Moment and Tag objects.
SWIFT_CLASS("_TtC10FlybitsSDK15APNSPreferences")
@interface APNSPreferences : NSObject

/// Whether or not a save is pending.
@property (nonatomic, readonly) BOOL requiresSave;

@property (nonatomic, readonly) BOOL isLoaded;

/// The object's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// The object's debugDescription.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// Failable initializer that returns an APNSPreferences based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Whether or not a given topic has push disabled.
///
/// \param topic The topic to check against the list of disabled elements.
///
/// \returns  True if the topic has push disabled, False otherwise.
- (BOOL)isTopicPushDisabled:(NSString * _Nonnull)topic;

/// Enables push for a given topic (removes it from the blacklist).
///
/// \param topic The topic for which to enable push notifications.
- (void)enablePushForTopic:(NSString * _Nonnull)topic;

/// Disables push for a given topic (adds it to the blacklist).
///
/// \param topic The topic for which to disable push notifications.
- (void)disablePushForTopic:(NSString * _Nonnull)topic;

/// Saves the current blacklist to the server. Success or failure is broadcast by the PushManager.
- (void)save;

/// Loads the current blacklist from the server. Success or failure is broadcast by the PushManager.
- (void)load;

/// Clears current blacklist and marks the list as requiring a save
- (void)clearAllKeywords;
@end



/// Base class for creating queries to retrieve zones/moments/users. When creating a query, you can define which fields to be included with the response and which fields should be omitted. If the API supports pagination, then certain chunk of data can be retrieved at one time using Pager.
///
/// You can subclass Query and override <code>func toDictionary() -> [String:String]
/// </code> to
/// return key-value pairs which will be turned into the URL path for a request.
SWIFT_CLASS("_TtC10FlybitsSDK5Query")
@interface Query : NSObject

/// Name of the properties of models that should ONLY be included in the response (anything you don't list here will be left out or set to null)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable includes;

/// Name of the properties of models that should be excluded in the response.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable excludes;

/// The pager object, used to page an API.
@property (nonatomic, strong) Pager * _Nonnull pager;

/// limit and offset are used for pagination. Get items starting at offset and returns number of items upto limit.
///
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the recordset to start.
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;

/// Creates a pager with default limit of 10 and offset of 0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// A convenience function for creating a default Query.
///
/// \returns  A <code>Query
/// </code> object.
+ (nonnull instancetype)query;

/// A convenience function for creating a Query with a limit and no offset.
///
/// \param limit The maximum number of records to return.
///
/// \returns  A <code>Query
/// </code> object.
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit;

/// A convenience function for creating a Query with a limit and offset.
///
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the recordset to start.
///
/// \returns  A <code>Query
/// </code> object.
+ (nonnull instancetype)queryWithLimit:(NSUInteger)limit andOffset:(NSUInteger)offset;

/// Returns key-value pair for URL path
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// Override to pretty-print the Query's debug description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// Override to pretty-print the Query's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A query used to create an account.
SWIFT_CLASS("_TtC10FlybitsSDK12AccountQuery")
@interface AccountQuery : Query

/// The user's first name.
@property (nonatomic, copy) NSString * _Nullable firstname;

/// The user's last name.
@property (nonatomic, copy) NSString * _Nullable lastname;

/// The user's desired password.
@property (nonatomic, copy) NSString * _Nullable password;

/// The user's email address.
@property (nonatomic, copy) NSString * _Nullable email;

/// Whether or not a JWT should be fetched, defaults to true
@property (nonatomic) BOOL fetchJWT;

/// Whether or not a rememberMe token should be fetched, defaults to false
@property (nonatomic) BOOL fetchRememberMe;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ContextDataPriority : NSInteger;

SWIFT_PROTOCOL("_TtP10FlybitsSDK19ContextDataProvider_")
@protocol ContextDataProvider <NSObject>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// This function is called when the pollFrequency has elapsed.
///
/// <em>NOTE: If this object is not polled (<code>pollFrequency = nil
/// </code>), this method is not called.</em>
///
/// \param completion The completion that will provide the <code>ContextManager
/// </code> with data or an error as appropriate.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK20ActivityDataProvider")
@interface ActivityDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startUpdates;
- (void)stopUpdates;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK17AudioDataProvider")
@interface AudioDataProvider : NSObject <ContextDataProvider>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end


SWIFT_CLASS("_TtC10FlybitsSDK24AvailabilityDataProvider")
@interface AvailabilityDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end



/// The BatteryDataProvider provides information about the device's battery percentage and whether or not it is charging.
SWIFT_CLASS("_TtC10FlybitsSDK19BatteryDataProvider")
@interface BatteryDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location The category of context in which the data provided is stored, i.e. ctx.sdk.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10FlybitsSDK6Beacon")
@interface Beacon : NSObject
@property (nonatomic, readonly) NSInteger strength;
@property (nonatomic, readonly) CLLocationDistance distance;
@property (nonatomic, readonly) NSInteger batteryLevel;
@property (nonatomic, readonly) BOOL inRange;
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
+ (NSInteger)calculateBatteryPercentage:(uint16_t)voltage;
+ (CLLocationDistance)calculateDistance:(NSInteger)txPower RSSI:(NSInteger)RSSI;
@end

@class MonitoredBeacon;

SWIFT_CLASS("_TtC10FlybitsSDK18BeaconDataProvider")
@interface BeaconDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// The frequency at which the beacon list will be refreshed
@property (nonatomic) NSInteger beaconPollFrequency;
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoringBeacons:(NSArray<MonitoredBeacon *> * _Nonnull)beacons;
- (void)stopMonitoringBeacons:(NSArray<MonitoredBeacon *> * _Nonnull)beacons;
- (void)startBeaconQuery;
- (void)stopBeaconQuery;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

SWIFT_CLASS("_TtC10FlybitsSDK13BeaconManager")
@interface BeaconManager : NSObject <CBCentralManagerDelegate>
+ (BeaconManager * _Nonnull)sharedManager;
@property (nonatomic, readonly) BOOL isScanning;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
@end

enum BooleanQueryOp : NSInteger;


/// BooleanQuery allows certain fields of the request query to be evaluated using boolean expression to retrieve data from Flybits.
///
/// For example:
/// You can query to get zones based on their tagId if they satisfy the following expression:
///
/// <code>let eq1 = BooleanQuery()
/// .orItem("Q")
/// .andItems(["A", "B"], .AND)
/// 
/// // equivalent to Q && (A && B)
/// 
/// </code>
/// ObjC example:
///
/// <code>BooleanQuery *query = [[BooleanQuery alloc] init:@"A"];
/// [query AND:@[@"B", @"C"] op: BooleanQueryOpAND];
/// [query OR:@"D"];
/// [query AND:@"E"];
/// [query AND:@[@"F", @"G"] op: BooleanQueryOpAND];
/// [query OR:@[@"H", @"I"] op: BooleanQueryOpAND];
/// [query OR:@"J"];
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK12BooleanQuery")
@interface BooleanQuery : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Initialize BooleanQuery with single item
///
/// \param value initial item for the expression
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;

/// Initialize BooleanQuery with array of items and each item in the array is the operand and op as the operator.
///
/// \param values items that to be appended to the expression using the operator
///
/// \param op Operator to be used between each items in the values when building the expression
- (nonnull instancetype)initWithValues:(NSArray<NSString *> * _Nonnull)values op:(enum BooleanQueryOp)op OBJC_DESIGNATED_INITIALIZER;

/// Append item using .AND operator
///
/// \param item Value to be appended to the boolean expression
///
/// \returns  Returns <code>self
/// </code> so calls can be chained
- (BooleanQuery * _Nonnull)AND:(NSString * _Nonnull)item;

/// Append array of items using .AND operator to the expression but each item within the items are appended using op.
///
/// For example:
///
/// <h2>Q && (C || D)</h2>
/// // Swift
/// let eq1 = BooleanQuery()
/// .OR("Q")
/// .AND(["C", "D"], .OR)
///
/// // ObjC
/// BooleanQuery *eq1 = [[BooleanQuery query:@"Q"] AND:@[@"C", @"D"] op: BooleanQueryOpOR];
///
/// <h2>Q && (C && D)</h2>
/// // Swift
/// let eq2 = BooleanQuery()
/// .OR("Q")
/// .AND(["C", "D"], .AND)
///
/// // ObjC
/// BooleanQuery *eq2 = [[BooleanQuery query:@"Q"] AND:@[@"C", @"D"] op: BooleanQueryOpAND];
///
/// \param item Value to be appended to the boolean expression
///
/// \param op Operator to be used between each items in the values when building the expression
///
/// \returns  Returns <code>self
/// </code> so calls can be chained
- (BooleanQuery * _Nonnull)AND:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;

/// Append item to the expression using OR operator
///
/// \param item Value to be appended to the boolean expression
///
/// \returns  Returns <code>self
/// </code> so calls can be chained
- (BooleanQuery * _Nonnull)OR:(NSString * _Nonnull)item;

/// Append array of items using .OR operator but each item within the items are appended using op.
///
/// For example:
///
/// <h2>Q || (C || D)</h2>
/// // Swift
/// let eq1 = BooleanQuery()
/// .OR("Q")
/// .OR(["C", "D"], .OR)
///
/// // ObjC
/// BooleanQuery *eq1 = [[BooleanQuery query:@"Q"] OR:@[@"C", @"D"] op: BooleanQueryOpOR];
///
/// <h2>Q || (C && D)</h2>
/// // Swift
/// let eq2 = BooleanQuery()
/// .OR("Q")
/// .OR(["C", "D"], .AND)
///
/// // ObjC
/// BooleanQuery *eq2 = [[BooleanQuery query:@"Q"] OR:@[@"C", @"D"] op: BooleanQueryOpAND];
///
/// \param item Value to be appended to the boolean expression
///
/// \param op Operator to be used between each items in the values when building the expression
///
/// \returns  Returns <code>self
/// </code> so calls can be chained
- (BooleanQuery * _Nonnull)OR:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;

/// Constructs a BooleanQuery with the specified item negated
///
/// \param item The item to negate
///
/// \returns  A <code>BooleanQuery
/// </code> containing the negated item
+ (BooleanQuery * _Nonnull)NOT:(NSString * _Nonnull)item;

/// Constructs a BooleanQuery with the specified list of items negated with each item separated by op.
///
/// \param items The list of items to append to the boolean expression.
///
/// \param op The operator to be used between each item specified in <code>items
/// </code>.
///
/// \returns  A <code>BooleanQuery
/// </code> containing the negated items
+ (BooleanQuery * _Nonnull)NOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;

/// ANDs a negated version of the element in the resulting query string.
///
/// \param item The item to negate as well as AND to the existing expression.
///
/// \returns  A <code>BooleanQuery
/// </code> to allow for chained construction.
- (BooleanQuery * _Nonnull)ANDNOT:(NSString * _Nonnull)item;

/// ANDs a negated version of the elements in the resulting query string.
///
/// \param items The list of items to negate as well as AND to the existing expression.
///
/// \param op The operator to be used between each item specified in <code>items
/// </code>.
///
/// \returns  A <code>BooleanQuery
/// </code> to allow for chained construction.
- (BooleanQuery * _Nonnull)ANDNOT:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
@end


@interface BooleanQuery (SWIFT_EXTENSION(FlybitsSDK))

/// Creates a BooleanQuery object with 'item'
+ (BooleanQuery * _Nonnull)query:(NSString * _Nonnull)item;

/// Creates a BooleanQuery object with 'items' where 'op' is used to combine each item in items.
+ (BooleanQuery * _Nonnull)query:(NSArray<NSString *> * _Nonnull)items op:(enum BooleanQueryOp)op;
@end


/// Supported operators for BooleanQuery when combining Multiple items together
typedef SWIFT_ENUM(NSInteger, BooleanQueryOp) {
  BooleanQueryOpAND = 0,
  BooleanQueryOpOR = 1,
};


@interface CLLocation (SWIFT_EXTENSION(FlybitsSDK))
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC10FlybitsSDK13CTX_Condition")
@interface CTX_Condition : NSManagedObject
- (nonnull instancetype)initWithLhs:(NSString * _Nonnull)lhs rhs:(NSString * _Nonnull)rhs weight:(double)weight op:(NSString * _Nonnull)op post:(NSString * _Nullable)post entity:(NSEntityDescription * _Nullable)entity context:(NSManagedObjectContext * _Nullable)context;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Condition (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK8CTX_Data")
@interface CTX_Data : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Data (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK8CTX_Rule")
@interface CTX_Rule : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CTX_Rule (SWIFT_EXTENSION(FlybitsSDK))
@end


SWIFT_CLASS("_TtC10FlybitsSDK19CarrierDataProvider")
@interface CarrierDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end



/// Condition represents a simple equation that will be evalued by the rules to consider whether or not the rule is valid.
SWIFT_CLASS("_TtC10FlybitsSDK9Condition")
@interface Condition : NSObject

/// left hand side of the equation
@property (nonatomic, copy) NSString * _Nullable lhs;

/// right hand side of the equation
@property (nonatomic, copy) NSString * _Nullable rhs;

/// Operator to evaluate lhs and rhs
@property (nonatomic, copy) NSString * _Nullable op;

/// <#post#>
@property (nonatomic, copy) NSString * _Nullable post;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ContextDataPriority) {
  ContextDataPriorityAny = 0,
  ContextDataPriorityWifiOnly = 1,
};


enum ContextProvider : NSInteger;


/// The ContextManager allows for various pieces of context data to be registered for upload to the Flybits servers.
SWIFT_CLASS("_TtC10FlybitsSDK14ContextManager")
@interface ContextManager : NSObject

/// Singleton access to the ContextManager.
+ (ContextManager * _Nonnull)sharedManager;
@property (nonatomic, readonly) BOOL isPolling;
@property (nonatomic) BOOL sentLatestValue;

/// Indicates whether or not the client has any active Rule subscriptions.
///
/// \returns  True when at least one <code>Rule
/// </code> has a subscription, False otherwise.
- (BOOL)hasRuleSubscription;

/// Indicates whether or not the client has subscribed to a given ruleName.
///
/// \param ruleName The name of the rule to check for a subscription.
- (BOOL)isSubscribedToRule:(NSString * _Nonnull)ruleName;

/// Toggles a subscription for a given ruleName. Default behaviour is to subscribe to a Rule.
///
/// \param ruleName The name of the rule to add or remove a subscription.
///
/// \param subscribe Whether to subscribe to or unsubscribe from a given <code>Rule
/// </code>. Default value is true.
- (void)updateRuleSubscription:(NSString * _Nonnull)ruleName subscribe:(BOOL)subscribe;

/// Retrieves the latest rules and their evaluation status.
///
/// <em>NOTE: Added and/or updated rules are broadcast via NSNotificationCenter.</em>
- (void)refreshRules;

/// Registers a given ContextDataProvider with the ContextManager that indicates the polling frequency (if any) as well as the upload frequency.
///
/// <em>NOTE: If the provider already exists, the provider is updated -- with new values for pollFrequency, uploadFrequency, and, priority and active is set to 'true' stored in core data.</em>
///
/// \param provider The <code>ContextDataProvider
/// </code> to register with the <code>ContextManager
/// </code> - will be updated in the instance the provider exists already.
- (id <ContextDataProvider> _Nullable)registerContextProvider:(id <ContextDataProvider> _Nonnull)provider error:(NSError * _Nullable * _Null_unspecified)error;
- (id <ContextDataProvider> _Nullable)registerSDKContextProvider:(enum ContextProvider)provider priority:(enum ContextDataPriority)priority pollFrequency:(NSInteger)pollFrequency uploadFrequency:(NSInteger)uploadFrequency;
- (id <ContextDataProvider> _Nullable)retrieveContextProvider:(enum ContextProvider)provider;
- (BOOL)removeContextProvider:(id <ContextDataProvider> _Nonnull)provider;
- (BOOL)removeSDKContextProvider:(enum ContextProvider)provider;
- (void)addDataForProvider:(id <ContextDataProvider> _Nonnull)provider;
- (void)startDataPolling;
- (void)stopDataPolling;
@end



/// Constants for various rule and context actions.
SWIFT_CLASS_NAMED("Constants")
@interface ContextManagerConstants : NSObject

/// com.flybits.context.rule This is the key for the rule object passed via a given Added or Changed notification.
+ (NSString * _Nonnull)ContextRule;

/// com.flybits.context.rule.added This is the broadcast topic when a rule is added to the ContextManager
+ (NSString * _Nonnull)ContextRuleAdded;

/// com.flybits.context.rule.changed This is the broadcast topic when a rule's lastResult has changed.
+ (NSString * _Nonnull)ContextRuleChanged;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ContextProvider) {
  ContextProviderActivity = 0,
  ContextProviderAudio = 1,
  ContextProviderAvailability = 2,
  ContextProviderBattery = 3,
  ContextProviderEddystone = 4,
  ContextProvideriBeacon = 5,
  ContextProviderCarrier = 6,
  ContextProviderCoreLocation = 7,
  ContextProviderHealthKitSteps = 8,
  ContextProviderLanguage = 9,
  ContextProviderNetwork = 10,
  ContextProviderOAuth = 11,
  ContextProviderPedometerSteps = 12,
};

@class CLHeading;
@class CLRegion;
@protocol CoreLocationDataProviderDelegate;
@class CLBeaconRegion;
@class CLLocationManager;
@class CLBeacon;
@class CLVisit;


/// The CoreLocationDataProvider is responsible for reporting location context data to the context servers. SDK users can allow the CoreLocationDataProvider to be the primary
SWIFT_CLASS("_TtC10FlybitsSDK24CoreLocationDataProvider")
@interface CoreLocationDataProvider : NSObject <CLLocationManagerDelegate, ContextDataProvider>
@property (nonatomic, readonly) BOOL isCoreLocationManager;

/// If this plugin is managing the CLLocationManager this becomes a readonly passthrough, otherwise the value must be set by an external source.
@property (nonatomic, strong) CLLocation * _Nullable location;

/// If this plugin is managing the CLLocationManager this becomes a readonly passthrough, otherwise the value must be set by an external source.
@property (nonatomic, strong) CLHeading * _Nullable heading;

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// A passthrough for CLLocationManager's pausesLocationUpdatesAutomatically property.
@property (nonatomic) BOOL pausesLocationUpdatesAutomatically;

/// A passthrough for CLLocationManager's distanceFilter property.
@property (nonatomic) CLLocationDistance distanceFilter;

/// A passthrough for CLLocationManager's desiredAccuracy property.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;

/// A passthrough for CLLocationManager's activityType property.
@property (nonatomic) CLActivityType activityType;

/// A passthrough for CLLocationManager's headingFilter property.
@property (nonatomic) CLLocationDegrees headingFilter;

/// A passthrough for CLLocationManager's headingOrientation property.
@property (nonatomic) CLDeviceOrientation headingOrientation;

/// A passthrough for CLLocationManager's allowsBackgroundLocationUpdates property.
@property (nonatomic) BOOL allowsBackgroundLocationUpdates;

/// A passthrough for CLLocationManager's monitoredRegions property.
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull monitoredRegions;

/// A passthrough for CLLocationManager's maximumRegionMonitoringDistance property.
@property (nonatomic, readonly) CLLocationDistance maximumRegionMonitoringDistance;

/// A passthrough for CLLocationManager's rangedRegions property.
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull rangedRegions;

/// Creates a CoreLocationDataProvider for use in recording location context data.
///
/// \param asCoreLocationManager Indicates whether or not this should be the primary <code>CLLocationManager
/// </code> instance, if <code>false
/// </code> the <code>location
/// </code> and <code>heading
/// </code> properties must be updated externally. Default value is <code>true
/// </code>.
///
/// \param authorization The desired <code>CLAuthorizationStatus
/// </code>. Default value is <code>AuthorizedWhenInUse
/// </code>.
- (nonnull instancetype)initAsCoreLocationManager:(BOOL)asCoreLocationManager withRequiredAuthorization:(CLAuthorizationStatus)authorization OBJC_DESIGNATED_INITIALIZER;

/// Adds a delegate to the CoreLocationDataProvider's list of delegates.
///
/// \param delegate A <code>class
/// </code> conforming to the <code>CoreLocationDataProviderDelegate
/// </code> protocol.
///
/// \returns  <code>true
/// </code> if the delegate was not previously registered, <code>false
/// </code> otherwise.
- (BOOL)addDelegate:(id <CoreLocationDataProviderDelegate> _Nonnull)delegate;

/// Removes a delegate from the CoreLocationDataProvider's list of delegates.
///
/// \param delegate A <code>class
/// </code> conforming to the <code>CoreLocationDataProviderDelegate
/// </code> protocol.
///
/// \returns  <code>true
/// </code> if the delegate was removed successfully, <code>false
/// </code> if the delegate was never registered.
- (BOOL)removeDelegate:(id <CoreLocationDataProviderDelegate> _Nonnull)delegate;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)requestWhenInUseAuthorizationAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)requestAlwaysAuthorizationAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startUpdatingLocationAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopUpdatingLocationAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startUpdatingHeadingAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopUpdatingHeadingAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)dismissHeadingCalibrationDisplayAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startMonitoringForRegion:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopMonitoringForRegion:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startRangingBeaconsInRegion:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopRangingBeaconsInRegion:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)requestStateForRegion:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)startMonitoringVisitsAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)stopMonitoringVisitsAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)allowDeferredLocationUpdatesUntilTraveled:(CLLocationDistance)distance timeout:(NSTimeInterval)timeout error:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)disallowDeferredLocationUpdatesAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// A passthrough for CLLocationManagerDelegate's requestWhenInUseAuthorization function.
- (BOOL)requestLocationAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// Tells the delegate that the authorization status for the application changed.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param status The new authorization status for the application.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;

/// Tells the delegate about the state of the specified region.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param state The state of the specified region. For a list of possible values, see the <code>CLRegionState
/// </code> type.
///
/// \param region The region whose state was determined.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;

/// Tells the delegate that the user entered the specified region.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was entered.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;

/// Tells the delegate that the user left the specified region.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was exited.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;

/// Tells the delegate that the location manager was unable to retrieve a location value.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object that was unable to retrieve the location.
///
/// \param error The error object containing the reason the location or heading could not be retrieved.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;

/// Tells the delegate that updates will no longer be deferred.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object that generated the update event.
///
/// \param error The error object containing the reason deferred location updates could not be delivered.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;

/// Tells the delegate that one or more beacons are in range.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param beacons An array of <code>CLBeacon
/// </code> objects representing the beacons currently in range.
///
/// \param region The region object containing the parameters that were used to locate the beacons.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;

/// Tells the delegate that a new region is being monitored.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param region The region that is being monitored.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region;

/// Tells the delegate that the location manager received updated heading information.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object that generated the update event.
///
/// \param newHeading The new heading data.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;

/// Tells the delegate that new location data is available.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object that generated the update event.
///
/// \param locations An array of <code>CLLocation
/// </code> objects containing the location data.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;

/// Tells the delegate that a new visit-related event was received.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param visit The visit object that contains the information about the event.
- (void)locationManager:(CLLocationManager * _Nonnull)manager didVisit:(CLVisit * _Nonnull)visit;

/// Tells the delegate that a region monitoring error occurred.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param region The region for which the error occurred.
///
/// \param error An error object containing the error code that indicates why region monitoring failed.
- (void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;

/// Tells the delegate that an error occurred while gathering ranging information for a set of beacons.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object reporting the event.
///
/// \param region The region object that encountered the error.
///
/// \param error An error object containing the error code that indicates why ranging failed.
- (void)locationManager:(CLLocationManager * _Nonnull)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;

/// Tells the delegate that location updates were paused.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object that paused the delivery of events.
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager;

/// Tells the delegate that the delivery of location updates has resumed.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager that resumed the delivery of events.
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager;

/// Asks the delegate whether the heading calibration alert should be displayed.
///
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
///
/// \param manager The location manager object coordinating the display of the heading calibration alert.
///
/// \returns  true if you want to allow the heading calibration alert to be displayed; false if you do not.
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager * _Nonnull)manager;

/// This function is called when the pollFrequency has elapsed.
///
/// <em>NOTE: If this object is not polled (<code>pollFrequency = nil
/// </code>), this method is not called.</em>
///
/// \param completion The completion that will provide the <code>ContextManager
/// </code> with data or an error as appropriate.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
@end



/// The CoreLocationDataProviderDelegate protocol defines the interface required to receive updates from the CoreLocationDataProvider when it is acting as the primary CLLocationManager. No delegate updates will be published if CoreLocationDataProvider is not managing an instance of CLLocationManager.
SWIFT_PROTOCOL("_TtP10FlybitsSDK32CoreLocationDataProviderDelegate_")
@protocol CoreLocationDataProviderDelegate
@optional
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didFailWithError:(NSError * _Nonnull)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didStartMonitoringForRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didVisit:(CLVisit * _Nonnull)visit;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (void)locationDataProviderDidPauseLocationUpdates:(CoreLocationDataProvider * _Nonnull)dataProvider;
- (void)locationDataProviderDidResumeLocationUpdates:(CoreLocationDataProvider * _Nonnull)dataProvider;
- (BOOL)locationDataProviderShouldDisplayHeadingCalibration:(CoreLocationDataProvider * _Nonnull)dataProvider;
@end


SWIFT_CLASS("_TtC10FlybitsSDK6Device")
@interface Device : NSObject
+ (NSString * _Nonnull)deviceType;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
@end



/// Tell Flybits which Zone / Moment that the current user using so analytics, context/rules engines and other internal states can be kept up-to-date. These calls should be made as soon as possible for analytics to be accurate as well as other components to function as expected.
///
/// Example:
/// // create a new query with type set to Zone and id set to <code>Zone.id
/// </code>
/// let query = DeviceQuery(type: DeviceQuery.EntityType.Zone, id: "ZONE_ID", physicalID: "DEVICE_ID")
///
/// <code>// tell flybits user is viewing the zone
/// DeviceRequest.Connect(query) { error in
///     if error == nil {
///         // try making the request again
///     }
/// }.execute()
/// 
/// 
/// // tell flybits user left the zone
/// DeviceRequest.Disconnect(query) { error in
///     if error == nil {
///         // try making the request again
///     }
/// }.execute()
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK11DeviceQuery")
@interface DeviceQuery : Query

/// ID of the ZoneMoment or Zone - type should also reflect Moment / ZoneMoment - this property is named identifier in Objective-C.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;

/// Convenience function to create a DeviceQuery for a Zone.
///
/// \param id The identifier of the <code>Zone
/// </code>.
///
/// \returns  A <code>DeviceQuery
/// </code> reflecting the type of request and device id.
+ (DeviceQuery * _Nonnull)queryForZone:(NSString * _Nonnull)id;

/// Convenience function to create a DeviceQuery for a ZoneMoment.
///
/// \param id The identifier of the <code>ZoneMoment
/// </code>.
///
/// \returns  A <code>DeviceQuery
/// </code> reflecting the type of request and device id.
+ (DeviceQuery * _Nonnull)queryForZoneMoment:(NSString * _Nonnull)id;
@end


SWIFT_CLASS("_TtC10FlybitsSDK9Eddystone")
@interface Eddystone : Beacon
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy, getter=namespace, setter=setNamespace:) NSString * _Nonnull namespace_;
@property (nonatomic, readonly, copy) NSString * _Nonnull instance;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object;
- (void)update:(Beacon * _Nonnull)other;
@end



/// The EddystoneDataProvider provides information about Eddystones in the vicinity of the device.
SWIFT_CLASS("_TtC10FlybitsSDK21EddystoneDataProvider")
@interface EddystoneDataProvider : BeaconDataProvider

/// Constructs an EddystoneDataProvider that acts as an EddystoneManagerDelegate to track Eddystone beacons.
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (void)didStartScan:(BeaconManager * _Nonnull)manager;
- (void)didStopScan:(BeaconManager * _Nonnull)manager;
- (void)didFindBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didLoseBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didUpdateBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
@end

@class NSURLRequest;
enum FlybitsRequestType : NSInteger;


/// The base network request.
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsRequest")
@interface FlybitsRequest : NSObject

/// Queue on which the completion block from response will be called. Uses main queue by default.
@property (nonatomic, strong) dispatch_queue_t _Null_unspecified completionCallbackQueue;

/// Readonly access to the underlying NSURLRequest
@property (nonatomic, readonly, strong) NSURLRequest * _Nullable URLRequest;

/// Requests to wait before timing out when no data is retrieved -- session is recreated so set this early as possible; Internally sets NSURLSessionConfiguration.timeoutIntervalForRequest.
+ (NSTimeInterval)timeoutIntervalForRequest;
+ (void)setTimeoutIntervalForRequest:(NSTimeInterval)value;

/// Constructs a new request based on an NSURLRequest.
///
/// \param request An NSURLRequest object.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request requestType:(enum FlybitsRequestType)requestType OBJC_DESIGNATED_INITIALIZER;

/// Uses Generics to serialize the server's response into an object of the specified type.
///
/// \param completionHandler A closure that returns the original request, the response, the serialized object and an error.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
- (nonnull instancetype)responseWithCompletionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable, NSHTTPURLResponse * _Nullable, NSData * _Nullable data, NSError * _Nullable))completion;

/// Serializes a server response into a String.
///
/// \param completionHandler A closure that returns the original request, the response, the serialized String and an error.
///
/// \returns  A cancellable <code>FlybitsRequest
/// </code> object.
- (nonnull instancetype)responseStringWithCompletionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable, NSHTTPURLResponse * _Nullable, NSString * _Nullable, NSError * _Nullable))completion;

/// Cancels a FlybitsRequest.
- (FlybitsRequest * _Nonnull)cancel;
@end


SWIFT_CLASS("_TtC10FlybitsSDK18FlybitsRequestList")
@interface FlybitsRequestList : FlybitsRequest
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRequests:(NSArray<FlybitsRequest *> * _Nonnull)requests OBJC_DESIGNATED_INITIALIZER;
- (FlybitsRequest * _Nonnull)cancel;
- (void)addRequest:(FlybitsRequest * _Nonnull)request;
- (void)removeRequest:(FlybitsRequest * _Nonnull)request;
@end


/// A list of possible request types for a Requestable.
typedef SWIFT_ENUM(NSInteger, FlybitsRequestType) {

/// A core request (inherent to Flybits core, i.e. Zone, User).
  FlybitsRequestTypeCore = 0,

/// A rule request (Rule based requests).
  FlybitsRequestTypeRules = 1,

/// A context data update request
  FlybitsRequestTypeContextUpdate = 2,

/// A push request (APNS and MQTT based requests).
  FlybitsRequestTypePush = 3,

/// A custom request (Moments and other requests).
  FlybitsRequestTypeCustom = 4,
};

@class HKSampleType;
@class HKObjectType;
@class HKQuantityType;
@class NSPredicate;
@class HKStatisticsQuery;
@class HKStatistics;


/// The SharedHealthStore provides easy access to HealthKit data and allows users to perform queries on a single, shared store.
SWIFT_CLASS("_TtC10FlybitsSDK22HealthContextDataStore")
@interface HealthContextDataStore : NSObject
+ (HealthContextDataStore * _Nonnull)sharedStore;

/// Issues an authorization request to HealthKit for the requested types, returns success or failure in the callback.
///
/// \param typesToShare A <code>Set
/// </code> of <code>HKSampleType
/// </code>s to write with the application.
///
/// \param readTypes A <code>Set
/// </code> of <code>HKObjectType
/// </code>s to read with the application.
///
/// \param withCompletion A completion informing the developer whether or not the user has authorized the action along with an informative error.
- (void)authorizeHealthKitToShareTypes:(NSSet<HKSampleType *> * _Nullable)typesToShare readTypes:(NSSet<HKObjectType *> * _Nullable)readTypes withCompletion:(void (^ _Nonnull)(BOOL authorized, NSError * _Nullable error))completion;

/// Issues a query for a given HKQuantityType and NSPredicate using the shared HKHealthStore. Returns results if any are available.
///
/// \param quantityType An HKQuantity type (typically the result of <code>HKObjectType.quantityTypeForIdentifier(HKQuantityTypeIdentifier...)
/// </code>).
///
/// \param quantitySamplePredicate An <code>NSPredicate
/// </code> used to filter the results (typically date ranges).
///
/// \param options An <code>HKStatisticsOptions
/// </code> used to control how the result is returned (typically <code>.CumulativeSum
/// </code>).
///
/// \param withCompletion A completion to return the results or error where applicable.
- (void)performHKQuery:(HKQuantityType * _Nonnull)quantityType quantitySamplePredicate:(NSPredicate * _Nonnull)quantitySamplePredicate options:(HKStatisticsOptions)options withCompletion:(void (^ _Nonnull)(HKStatisticsQuery * _Nonnull query, HKStatistics * _Nullable result, NSError * _Nullable error))completion;
@end



/// The HealthKitStepsDataProvider is the first of the Fitness data providers that use the SharedHealthStore
SWIFT_CLASS("_TtC10FlybitsSDK26HealthKitStepsDataProvider")
@interface HealthKitStepsDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// Using the SharedHealthStore, this function retrieves the step count for today.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest context data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDictionary;


/// A wrapper class for image metadata and any loaded images (raw data or UIImage)
///
/// Typical usage:
///
/// <code>image.URL().value
/// image.URL(80%).value
/// image.URL(60%).value
/// image.URL(40%).value
/// image.URL(20%).value
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK5Image")
@interface Image : NSObject

/// A placeholder image
@property (nonatomic, strong) UIImage * _Nullable placeholderImage;

/// Override to pretty-print the Image's description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Override to pretty-print the Image's debugDescription
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// Creates an Image with a specified URL.
///
/// \param URL The download URL for the image
- (nonnull instancetype)initWithURL:(NSString * _Nonnull)URL OBJC_DESIGNATED_INITIALIZER;

/// Creates an Image with a server response.
///
/// \param response The server response.
///
/// \param representation The raw representation from the server response.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Creates an Image with a raw response from the server and a list of locales.
///
/// \param dictionary The localization section of an API response.
///
/// \param locales A list of locale objects.
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary locales:(NSArray<NSLocale *> * _Nullable)locales OBJC_DESIGNATED_INITIALIZER;

/// Retrieve the localized URL for a specified image size (default is 100%)
///
/// \param size The desired size of the image.
///
/// \returns  A URL for the image based on the specified size.
- (NSString * _Nullable)URLString:(enum ImageSize)size locale:(NSLocale * _Nullable)locale;

/// Loads an Image with a specified size and stores the raw NSData bytes internally.
///
/// \param size The desired size of the image.
///
/// \param locale The desired locale for the image.
///
/// \param withCompletion A completion closure returning the image (with raw data included) or any errors.
///
/// \returns  A cancellable FlybitsRequest object.
- (FlybitsRequest * _Nonnull)loadImage:(enum ImageSize)size locale:(NSLocale * _Nullable)locale withCompletion:(void (^ _Nonnull)(Image * _Nonnull image, NSError * _Nullable error))completion;

/// Unloads an UIImage from this object for the specified size and locale.
///
/// \param size The desired size of the image.
///
/// \param locale The desired locale for the image.
- (void)unloadImage:(enum ImageSize)size;

/// Unloads all UIImages from this object.
- (void)unloadAllImages;

/// Unloads the raw data from this object for the specified size and locale.
///
/// \param size The desired size of the image.
///
/// \param locale The desired locale for the image.
- (void)unloadRaw:(enum ImageSize)size;

/// Unloads all raw NSData objects from this object.
- (void)unloadAllRaw;

/// Unloads all raw NSData and UIImage objects.
- (void)unloadAll;

/// Returns a UIImage of specified size for a given locale, or default locale if none specified.
///
/// \param size The desired size of the image.
///
/// \param locale The desired locale. Passing nil uses the default locale.
///
/// \returns  A UIImage of specified size for the provided locale.
- (UIImage * _Nullable)loadedImage:(enum ImageSize)size locale:(NSLocale * _Nullable)locale;

/// Returns the raw image data as downloaded for a given locale, or default locale if none specified.
///
/// \param size The desired size of the image.
///
/// \param locale The desired locale. Passing nil uses the default locale.
///
/// \returns  An NSData of the specified size for the provided locale.
- (NSData * _Nullable)rawData:(enum ImageSize)size locale:(NSLocale * _Nullable)locale;

/// Check to see if the Image has a valid URL for locale.
///
/// \param locale NSLocale with valid NSLocaleLanguageCode set
///
/// \returns  true, if the image has a URL for the locale; false, otherwise.
- (BOOL)imageAvailable:(NSLocale * _Nonnull)locale;

/// Check to see if the Image has a valid URL for languageCode.
///
/// \param languageCode Language to check for URL. Two letter language code, i.e., 'en'
///
/// \returns  true, if the image has a URL for the languageCode; false, otherwise.
- (BOOL)imageAvailableForLanguageCode:(NSString * _Nonnull)languageCode;
@end


@interface Image (SWIFT_EXTENSION(FlybitsSDK))

/// Returns the default locale of this image as returned by server;
- (NSLocale * _Nullable)defaultLocale;
@end


@interface Image (SWIFT_EXTENSION(FlybitsSDK))

/// Returns the smallest image size that fits viewSize. i.e., if the original image is 300 by 300, then 5 different versions of those images are available.
///
/// 100% = 300 by 300
/// 80% = 240 by 240
/// 60% = 180 by 180
/// 40% = 120 by 120
/// 20% =  60 by  60
///
/// and if you want to display that image inside an image view of 50 by 50, then downloading the
/// ImageSize._20 makes sense since it's the smallest ImageSize that can fit the size of your view.
/// This function will return ImageSize._20 for this scenerio.
///
/// \param viewSize size of your view
///
/// \param locale locale of the image
///
/// \returns  Smallest image size thats fits your view's <code>viewSize
/// </code>. When the view size is bigger than original, it will
/// return ImageSize._100.
- (enum ImageSize)smallestBestFittingSizeForSize:(CGSize)viewSize locale:(NSLocale * _Nullable)locale;
@end


SWIFT_CLASS("_TtC10FlybitsSDK13ImageMetadata")
@interface ImageMetadata : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull createdAt;
@property (nonatomic, readonly, copy) NSString * _Nonnull fileName;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id url:(NSString * _Nonnull)url userId:(NSString * _Nonnull)userId createdAt:(NSString * _Nonnull)createdAt fileName:(NSString * _Nonnull)fileName width:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;

/// Failable initializer that returns an ImageMetadata object based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
@end


/// Image size.
typedef SWIFT_ENUM(NSInteger, ImageSize) {

/// Image @ 100%
  ImageSize_100 = 0,

/// Image @ 80%
  ImageSize_80 = 1,

/// Image @ 60%
  ImageSize_60 = 2,

/// Image @ 40%
  ImageSize_40 = 3,

/// Image @ 20%
  ImageSize_20 = 4,
};


SWIFT_CLASS("_TtC10FlybitsSDK20LanguageDataProvider")
@interface LanguageDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// Retrieves battery information including percentage and whether or not the device is charging.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Metadata represents any key-value pair associated with Zone/Moment by the owner/manager of each entity.
///
/// If the Zone represents a branch of your store, then you can specify if your branch is having a sale/promotion by setting metadata <code>["promotion-duration":"18-JAN-2016 TO 19-FEB-2016"]
/// </code> so when you display the Zones, you can parse out promotion-duration and indicate to the user that there is a promotion going on.
SWIFT_CLASS("_TtC10FlybitsSDK8Metadata")
@interface Metadata : NSObject

/// Underlying storage for metadata properties (made public for Objective-C support
@property (nonatomic, strong) NSDictionary * _Nonnull metadata;

/// Failable initializer that returns a Metadata object based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
@end

enum PushMessageEntity : NSInteger;


/// A protocol to allow easy subscription and unsubscription from Flybits model objects.
SWIFT_PROTOCOL("_TtP10FlybitsSDK16PushConfigurable_")
@protocol PushConfigurable
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;
@property (nonatomic, readonly, copy) NSString * _Nonnull route;

/// Subscribes the current object to push for the desired push type.
///
/// \param type The type of notification desired.
- (void)subscribeToPush;

/// Unsubscribes the current object to push for the desired push type.
///
/// \param type The type of notification desired.
- (void)unsubscribeFromPush;
@end

@class NSDate;


/// The Moment represents pieces of data/informations that a user can consume. A downloadable piece of content to provide new functionality to an existing app.
///
/// <code>Moment
/// </code>s can be anything from simple data such as websites, image
/// galleries, and video to more complex pieces of data such as galleries,
/// notes, and sensor-based information.
///
/// A <code>Moment
/// </code> is created from a template as you might create a <code>Word Document
/// </code>
/// from available templates. <code>Moment.instanceID
/// </code> will tell you which template
/// is used to create a <code>Moment
/// </code>.
///
/// Usually <code>Moment
/// </code>s will be associated with a <code>Zone
/// </code> and allows user to consume
/// it when they connect to a <code>Zone
/// </code>.
///
/// You should never create instance of <code>Moment
/// </code> yourself, instead, Flybits will
/// create it for you when you call APIs to get moments.
///
/// NOTE:
///
/// Other than Flybit's built <code>Moment
/// </code>s, other <code>Moment
/// </code>s are built by thirdparty and data from those <code>Moment
/// </code>s are stored separately from the Flybits data -- on their own third party servers. You might have to implement the user interface/logic for each Moment depending on what's available to you. You should follow the Moments developers guidelines/APIs when creating a Moment.
SWIFT_CLASS("_TtC10FlybitsSDK6Moment")
@interface Moment : NSObject <PushConfigurable>

/// Unique identifier -- String format of UUID. NOTE: This is a ZoneMomentInstance ID.
@property (nonatomic, copy) NSString * _Nonnull identifier;

/// Zone identifier -- Zone.id.
@property (nonatomic, copy) NSString * _Nonnull zoneID;

/// The identifier of the MomentInstance this Moment has been created by.
@property (nonatomic, copy) NSString * _Nonnull momentInstanceID;

/// The identifier of the Moment template this Moment has been created by. I.E. Gallery, Poll
@property (nonatomic, copy) NSString * _Nonnull momentID;

/// Package identifier of the moment (i.e. com.flybits.moments.users)
@property (nonatomic, copy) NSString * _Nonnull packageName;

/// Launch URL to get the data from this moment's server -- consider looking at their developer guide/API Docs
@property (nonatomic, copy) NSString * _Nonnull launchURL;

/// What HTTP method -- POST, GET -- should be used to retrieve data using launchURL
@property (nonatomic, copy) NSString * _Nonnull launchURLType;

/// Whether the Moment should be automatically started.
@property (nonatomic) BOOL isAutoRun;

/// Image that represents this Moment
@property (nonatomic, strong) Image * _Nullable image;

/// Localizations for properties such as name, image.
@property (nonatomic, strong) NSDictionary * _Nullable localizations;

/// Order of the Moment it should be displayed to user -- default is -1.
@property (nonatomic) NSInteger order;

/// Metadata -- additional information about this Moment that can be modified from management console.
@property (nonatomic, strong) Metadata * _Nullable metadata;

/// Whether or not the Moment is published.
@property (nonatomic) BOOL published;

/// The date this Moment was created
@property (nonatomic, strong) NSDate * _Nullable createdAt;

/// The date this Moment was modified
@property (nonatomic, strong) NSDate * _Nullable lastModifiedAt;

/// The PushMessageEntity of this class (.ZoneMomentInstance)
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;

/// The Moment's hash value (used when treated as an NSObject).
@property (nonatomic, readonly) NSUInteger hash;

/// IDs of the Tag that are associated with this Moment
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tagIDs;

/// The MQTT route for this Moment
@property (nonatomic, readonly, copy) NSString * _Nonnull route;

/// A debug description of the Moment
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// A short description of the Moment
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Failable initializer that returns a Moment based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Compares two moments for equality.
///
/// \param object Another <code>Moment
/// </code> (<code>NSObject.isEqual()
/// </code> is used if object is not a <code>Moment
/// </code>).
///
/// \returns  <code>true
/// </code> if two <code>Moment
/// </code>s have the same <code>id
/// </code>, <code>false
/// </code> otherwise.
- (BOOL)isEqual:(id _Nullable)object;

/// Constructs a Moment from a cached object.
///
/// \param mo An <code>NSManagedObject
/// </code> version of the <code>Moment
/// </code>.
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;
- (void)subscribeToPush;
- (void)unsubscribeFromPush;
@end


@interface Moment (SWIFT_EXTENSION(FlybitsSDK))

/// Objective-C wrapper - Get Moment's name in the order of preferredLocale or defaultLocale.
- (NSString * _Nullable)momentName;

/// Objective-C wrapper - Get Moment's localized name for the specific locale with languageCode. Default value = ""
- (NSString * _Nullable)localizedName:(NSLocale * _Nonnull)locale;

/// Returns the default locale defined by Moment owner; Can be null if you exclude defaultLocale when querying Moments
- (NSLocale * _Nullable)defaultLocale;
@end



/// MomentAuthorizationResponse is returned by MomentRequest.GetAuthorization(...) which contains the authorization token as the payload. The token is then used to validate so moment's API can be accessed.
SWIFT_CLASS("_TtC10FlybitsSDK27MomentAuthorizationResponse")
@interface MomentAuthorizationResponse : NSObject

/// HTTPMethod that should be used to validate the 'payload'
@property (nonatomic, readonly, copy) NSString * _Nonnull method;

/// Authorization token/payload
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;

/// Override to pretty-print the MomentRequest's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MomentModule;


/// Maintains a registry to map Moment types and their implementations.
///
/// Sample Code:
///
/// <code>let manager = MomentManager()
/// 
/// // Moment Registration
/// manager.registerModule("com.flybits.moments.speedial") { _, _, _ in
///     return SpeeddialMoment()
/// }
/// manager.registerModule("com.flybits.moments.gallery") { _,_,_ in
///     return loadMomentFromStoryboard("mm_image_gallery")
/// }
/// 
/// // Getting moment's module
/// let moment = ...
/// 
/// let module = manager.module(moment)
/// 
/// if let module = module as? UIViewController {
///     // display the view controller
/// } else {
///     // this moment doesn't have a view controller, so load it manually
///     module.loadMoment(moment, info: self) { (data, error, otherInfo) -> Void in
///         // do something with data
///     }
/// }
/// 
/// // Unregister a module
/// manager.unregisterModule("com.flybits.moments.speedial")
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK13MomentManager")
@interface MomentManager : NSObject

/// When a module is not registered for a package name, nonRegisteredModuleHanlder gets invoked where you can return  a module (by examining it's type/launchURL/id etc...)
@property (nonatomic, copy) id <MomentModule> _Nullable (^ _Nullable unregisteredModuleHandler)(MomentManager * _Nonnull manager, NSString * _Nonnull packageName, Moment * _Nonnull moment);

/// Default constructor, does nothing.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Check wether a MomentModule was registered for a Moment with packageName.
///
/// \param packageName packageName of the Moment to check against the registry.
///
/// \returns  <code>true
/// </code>, if the packageName has a <code>MomentModule
/// </code> registered previously using 'MomentManager.registerModule(...)', <code>false
/// </code>, otherwise.
- (BOOL)isModuleRegistered:(NSString * _Nonnull)packageName;

/// Get a MomentModuleCallback which can be invoked to get a new instance of MomentModule for packageName. You should always use MomentManager.module(...), but since that already calls initialize on the module and if you don't want that behaviour then use this. Also, if you have set nonRegisteredModuleHanlder, then if we don't find any module for the packageName, then nonRegisteredModuleHanlder gets invoked to provide a module.
///
/// \param packageName packageName of the Moment that was previously registered
///
/// \returns  MomentModuleCallback which can be invoked
- (id <MomentModule> _Nullable (^ _Nullable)(MomentManager * _Nonnull manager, NSString * _Nonnull packageName, Moment * _Nonnull moment))moduleCallback:(NSString * _Nonnull)packageName;

/// Get an instance of MomentModule for the Moment. Moment.packageName is used to get the MomentModule. If Moment.packageName wasn't registered previously, nil is returned.
///
/// \param moment Instance of a Moment with packageName already registered
///
/// \returns  Instance of <code>MomentModule
/// </code> is returned if a packageName is registered for <code>moment
/// </code>
- (id <MomentModule> _Nullable)module:(Moment * _Nonnull)moment;
@end



/// Moment modules provide a way to load and unload data from a Moment
///
/// <ol><li>initialize is called with moment</li><li>when everything is ready, allow module to load the moment... i.e., get data from web</li><li>unload the moment, give time to clean up states</li></ol>
SWIFT_PROTOCOL("_TtP10FlybitsSDK12MomentModule_")
@protocol MomentModule

/// Access to the moment
@property (nonatomic, readonly, strong) Moment * _Null_unspecified moment;

/// Initializes a MomentModule from a provided Moment
///
/// \param moment An initialized moment.
- (void)initialize:(Moment * _Nonnull)moment;

/// Loads the data for a specified moment.
///
/// \param moment The moment to load.
///
/// \param info A dictionary of [String:AnyObject] elements for user defined data.
- (void)loadMoment:(Moment * _Nonnull)moment info:(id _Nullable)info;

/// Loads a moment with a callback
///
/// \param moment The moment to load.
///
/// \param info A dictionary of [String:AnyObject] elements for user defined data.
///
/// \param withCompletion An optional completion that returns the moment's raw data along with any errors encountered and the original info provided.
- (void)loadMoment:(Moment * _Nonnull)moment info:(id _Nullable)info withCompletion:(void (^ _Nullable)(NSData * _Nullable data, NSError * _Nullable error, NSDictionary * _Nullable otherInfo))completion;

/// Unloads a specified moment
///
/// \param moment The moment to unload.
- (void)unloadMoment:(Moment * _Nonnull)moment;
@end



/// Using MomentQuery, you can query for moments that are in certain zones, specific types of moments in a zone or get detail information of moments that you already have the ids. After creating a MomentQuery, you can execute it using MomentRequest.Query to actually make the request. Before creating your custom query, see if any of the cases defined in MomentRequest can be used.
///
/// Example: Retrieve the first 10 video and gallery moments from "ZONEID1" or "ZONEID2".
///
/// let query = MomentQuery(limit:10, offset:0)
/// query.zoneIDs = ["ZONEID1", "ZONEID2"]
///
/// // assuming momentID of video is "MOMENT_VIDEO_ID" and
/// // gallery is "MOMENT_GALLERY_ID"
/// query.momentInstanceIDs = ["MOMENT_VIDEO_ID", "MOMENT_GALLERY_ID"]
///
/// Example: Retrieve moment details for "MOMENT1", "MOMENT2", "MOMENT3"
///
/// let query = MomentQuery(limit:100, offset:0)
/// query.momentIDs = ["MOMENT1", "MOMENT2", "MOMENT3"]
SWIFT_CLASS("_TtC10FlybitsSDK11MomentQuery")
@interface MomentQuery : Query

/// Retrieve moments that are part of this list of Zone identifiers.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneIDs;

/// Retrieve specific moments via their id property.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentIDs;

/// get moments that are instances of moments with id in momentInstanceIDs
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentInstanceIDs;

/// Retrieve moments based on ids of Tag that are associated
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;

/// Returns key-value pair for API requests.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class defines a list of constants for properties that can be included/excluded in a given API request.
SWIFT_CLASS_NAMED("Constants")
@interface MomentQueryConstants : NSObject

/// "auxiliaryAncestorProperties"
+ (NSString * _Nonnull)AuxiliaryAncestorProperties;

/// "createdAt"
+ (NSString * _Nonnull)CreatedAt;

/// "id"
+ (NSString * _Nonnull)ID;

/// "isAutoRun"
+ (NSString * _Nonnull)IsAutoRun;

/// "isPublished"
+ (NSString * _Nonnull)IsPublished;

/// "lastModifiedAt"
+ (NSString * _Nonnull)LastModifiedAt;

/// "momentInstanceId"
+ (NSString * _Nonnull)MomentInstanceID;

/// "order"
+ (NSString * _Nonnull)Order;

/// "zoneId"
+ (NSString * _Nonnull)ZoneID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MomentQuery (SWIFT_EXTENSION(FlybitsSDK))
@property (nonatomic, strong) NSNumber * _Nullable isPublished;
@property (nonatomic, strong) NSNumber * _Nullable isAutorun;
@end


SWIFT_CLASS("_TtC10FlybitsSDK15MonitoredBeacon")
@interface MonitoredBeacon : NSObject
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object;
@end

typedef SWIFT_ENUM(NSInteger, BeaconType) {
  BeaconTypeiBeacon = 0,
  BeaconTypeEddystone = 1,
  BeaconTypeUnknown = 2,
};


@interface NSDate (SWIFT_EXTENSION(FlybitsSDK))
@end


@interface NSHTTPURLResponse (SWIFT_EXTENSION(FlybitsSDK))
@end


@interface NSObject (SWIFT_EXTENSION(FlybitsSDK))
@end



/// A structure containing many constants used internally in the SDK
SWIFT_CLASS("_TtC10FlybitsSDK7Network")
@interface Network : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A class containing a number of constants used internally in the SDK
SWIFT_CLASS_NAMED("Constants")
@interface NetworkConstants : NSObject

/// The maximum number of records the server can return in one request (500)
+ (NSUInteger)APIMaxRecords;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The NetworkDataProvider allows use of the SSID and connection type contexts.
SWIFT_CLASS("_TtC10FlybitsSDK19NetworkDataProvider")
@interface NetworkDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;

/// Retrieves Network information such as internet reachability and whether the device is on WiFi and the SSID (if any).
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest context data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OAuthConsentViewControllerDelegate;
@class WKWebView;
@class WKNavigationResponse;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10FlybitsSDK26OAuthConsentViewController")
@interface OAuthConsentViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, strong) id <OAuthConsentViewControllerDelegate> _Nullable delegate;
- (void)loadView;
- (void)performOAuthRequest;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10FlybitsSDK34OAuthConsentViewControllerDelegate_")
@protocol OAuthConsentViewControllerDelegate
- (void)controllerDidFinishSuccessfully:(OAuthConsentViewController * _Nonnull)controller;
- (void)controller:(OAuthConsentViewController * _Nonnull)controller didFailWithError:(NSError * _Nonnull)error;
@end



/// If there are lot of items to be returned, for performance reason, pagination should be used. Even if you do not indicate pagination, response might be paginated.
///
/// By setting <code>limit
/// </code> and <code>offset
/// </code>, you can retrieve different "pages" of data. For example, you might want to display first 20 items (zones/moments/users/etc). So, by using pagination as shown below, you will receive the first 20 items.
///
/// <code>// First 20 items or first page with 20 items
/// let pager = Pager(limit:20, offset:0)
/// 
/// </code>
/// To get the next page or next 20 items:
///
/// <code>// Second 20 items or second page with 20 items
/// let pager = Pager(limit:20, offset:20)
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK5Pager")
@interface Pager : NSObject

/// Maximum number of results that can be returned in a paged API call.
+ (NSUInteger)MaxResults;

/// The maximum number of records to return on this page.
@property (nonatomic, readonly) NSUInteger limit;

/// The offset into the total number of records at which to start the result set.
@property (nonatomic, readonly) NSUInteger offset;

/// Failable initializer that returns a Pager based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Updates the pager to a specific page index (limit/offset calculation is done for you)
///
/// \param pageIndex The page number.
- (void)gotoPage:(NSUInteger)pageIndex;

/// Converts the pager into a dictionary (used when sent via an API request).
///
/// \returns  A dictionary containing the <code>limit
/// </code> and <code>offset
/// </code> properties.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// Convenience function to determine if the result set is at the end of the list.
///
/// \returns  <code>true
/// </code> if there are additional results through which to page, <code>false
/// </code> otherwise.
- (BOOL)hasMore;
@end


@interface Pager (SWIFT_EXTENSION(FlybitsSDK))

/// A public constructor for Objective-C clients.
///
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the record set.
///
/// \returns  A Pager object representing the provided limit and offset.
+ (Pager * _Nonnull)pager:(NSUInteger)limit offset:(NSUInteger)offset;
@end

@class CMPedometer;

SWIFT_CLASS("_TtC10FlybitsSDK26PedometerStepsDataProvider")
@interface PedometerStepsDataProvider : NSObject <ContextDataProvider>

/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull contextCategory;

/// The frequency at which this context plugin is polled for data.
///
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager
/// </code></em>
@property (nonatomic) int32_t pollFrequency;

/// The frequency at which this context plugin will upload data.
///
/// <em>NOTE: The minimum value across all context plugins will determine the upload rate</em>
@property (nonatomic) int32_t uploadFrequency;

/// Whether or not this plugin will broadcast on any network or WiFi only.
@property (nonatomic) enum ContextDataPriority priority;
@property (nonatomic, strong) CMPedometer * _Null_unspecified pedometer;

/// Using the SharedHealthStore, this function retrieves the step count for today.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest context data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum PushServiceLevel : NSInteger;


/// A set of configurable properties for the push manager.
///
/// Currently, the service level and APNS token are supported.
SWIFT_CLASS("_TtC10FlybitsSDK17PushConfiguration")
@interface PushConfiguration : NSObject

/// The level of service desired.
@property (nonatomic) enum PushServiceLevel serviceLevel;

/// Whether or not Flybits Data should be fetched automatically when a push is received.
@property (nonatomic) BOOL autoFetchData;

/// Whether or not Foreground push should attempt a reconnection (either for an expired JWT or any other reason).
@property (nonatomic) BOOL autoReconnect;

/// Additional key/value pairs to send during device registraiton
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable deviceRegistrationData;

/// Automatically saves preferences when subscribing to any of the models (Zone, Moment, ... etc)
@property (nonatomic) BOOL autoSavePushPreferences;

/// The APNS token received after registration
@property (nonatomic, strong) NSData * _Nullable apnsToken;

/// A constructor for the PushConfiguration, makes a request to register the token with the server if the user is logged in.
///
/// \param serviceLevel The desired level of service.
///
/// \param apnsToken The APNS token returned via application:didRegisterForRemoteNotificationsWithDeviceToken:.
- (nonnull instancetype)initWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nullable)apnsToken autoFetchData:(BOOL)autoFetchData autoReconnect:(BOOL)autoReconnect deviceRegistrationData:(NSDictionary<NSString *, id> * _Nullable)deviceRegistrationData OBJC_DESIGNATED_INITIALIZER;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel and APNS token.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \param andAPNSToken The App's APNS token.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel andAPNSToken:(NSData * _Nonnull)apnsToken;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel, APNS token and an option for additional key-value-pairs to be passed to the device registration server.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \param apnsToken The App's APNS token.
///
/// \param andDeviceRegistrationData Additional data that will be passed in key-value-pairs to the device registration server.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken andDeviceRegistrationData:(NSDictionary<NSString *, id> * _Nonnull)deviceRegistrationData;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel, APNS token and whether or not the SDK should fetch objects from Core pushes.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \param apnsToken The App's APNS token.
///
/// \param andAutoFetchData Whether or not the SDK should fetch objects from Core pushes.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken andAutoFetchData:(BOOL)autoFetchData;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel, APNS token, whether or not the SDK should fetch objects from Core pushes and whether or not the SDK should attempt to reconnect when the connection is lost.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \param apnsToken The App's APNS token.
///
/// \param autoFetchData Whether or not the SDK should fetch objects from Core pushes.
///
/// \param andAutoReconnect Whether or not the SDK should reconnect when a service interruption occurs or if a JWT has expired.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken autoFetchData:(BOOL)autoFetchData andAutoReconnect:(BOOL)autoReconnect;

/// A convenience function for creating a PushConfiguration with a pre-defined PushServiceLevel, APNS token, whether or not the SDK should fetch objects from Core pushes, whether or not the SDK should attempt to reconnect when the connection is lost and an option for additional key-value-pairs to be passed to the device registration server.
///
/// \param serviceLevel The desired <code>PushServiceLevel
/// </code>.
///
/// \param apnsToken The App's APNS token.
///
/// \param autoFetchData Whether or not the SDK should fetch objects from Core pushes.
///
/// \param autoReconnect Whether or not the SDK should reconnect when a service interruption occurs or if a JWT has expired.
///
/// \param andDeviceRegistrationData Additional data that will be passed in key-value-pairs to the device registration server.
///
/// \returns  A <code>PushConfiguration
/// </code>.
+ (PushConfiguration * _Nonnull)configurationWithServiceLevel:(enum PushServiceLevel)serviceLevel apnsToken:(NSData * _Nonnull)apnsToken autoFetchData:(BOOL)autoFetchData autoReconnect:(BOOL)autoReconnect andDeviceRegistrationData:(NSDictionary<NSString *, id> * _Nonnull)deviceRegistrationData;

/// Updates the APNS token on Flybits push servers. Will be attempted when PushConfiguration is constructed or when APNS token is directly provided.
///
/// <em>NOTE: This requires a user to be logged in to Flybits, can be called manually if required. Also, any properties saved in <code>PushConfiguration.deviceRegistrationData
/// </code> will be passed along</em>
- (void)updateTokenOnServer:(NSData * _Nonnull)token deviceRegistrationData:(NSDictionary<NSString *, id> * _Nullable)deviceRegistrationData withCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;

/// Removes user specified device registration data from the SDK.
- (void)clearDeviceRegistrationData;
@end



/// Manages handling Flybits related push messages.
///
/// When a <code>PushConfiguration
/// </code> is provided, it will automatically connect, if required. The <code>PushManager
/// </code> requires a user to be logged in before connecting.
SWIFT_CLASS("_TtC10FlybitsSDK11PushManager")
@interface PushManager : NSObject

/// Singleton access to the PushManager
+ (PushManager * _Nonnull)sharedManager;

/// The configuration of the push manager, includes service level (i.e. foreground / background).
@property (nonatomic, strong) PushConfiguration * _Nonnull configuration;

/// The background push preferences
@property (nonatomic, readonly, strong) APNSPreferences * _Nonnull backgroundPreferences;

/// Used to pass APNS notifications to the PushManager.
///
/// \param notification An APNS notification.
///
/// \param fetchCompletionHandler The optional <code>fetchCompletionHandler
/// </code> to call back if async data needs to be retrieved.
///
/// \returns  <code>true
/// </code> if the content was decoded properly (i.e. a properly formatted SDK push notification), <code>false
/// </code> if the content is not in the proper format (i.e. a push notification not intended for the SDK or a mangled push message).
- (BOOL)notificationReceived:(NSDictionary * _Nonnull)notification fetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;

/// Allows developers to subscribe to Foreground notifications for a free-form topic.
///
/// \param topic The topic to subscribe, i.e. Zone.Modified
- (void)subscribeToTopic:(NSString * _Nonnull)topic;

/// Allows developers to unsubscribe from Foreground notifications for a free-form topic.
///
/// \param topic The topic to unsubscribe, i.e. Zone.Modified
- (void)unsubscribeFromTopic:(NSString * _Nonnull)topic;
@end



/// Publicly exposed constants for various pieces of data provided in the payload of a PushManager notification.
SWIFT_CLASS_NAMED("Constants")
@interface PushManagerConstants : NSObject

/// com.flybits.push.connected - The broadcast topic when an MQTT connection has been made successfully.
+ (NSString * _Nonnull)PushConnected;

/// com.flybits.push.disconnected - The broadcast topic when an MQTT connection has been lost / disconnected.
+ (NSString * _Nonnull)PushDisconnected;

/// com.flybits.push.fetchError - A key to identify that an error was encountered while performing a fetch.
+ (NSString * _Nonnull)PushFetchError;

/// com.flybits.push.content - The content of the push data (a PushMessage).
+ (NSString * _Nonnull)PushMessageContent;

/// com.flybits.push.error.data - The error returned when an error is encountered by the PushManager
+ (NSString * _Nonnull)PushErrorData;

/// com.flybits.push.error - The broadcast topic when an error is encountered by the PushManager (used for NSNotificationCenter subscriptions).
+ (NSString * _Nonnull)PushErrorTopic;

/// com.flybits.push.preferencesError - The broadcast topic when an error is encountered with push preferences (save or load).
+ (NSString * _Nonnull)PushPreferencesErrorTopic;

/// com.flybits.push.preferencesUpdated - The broadcast topic when a preference has been successfully updated on the server.
+ (NSString * _Nonnull)PushPreferencesUpdatedTopic;

/// com.flybits.push.error.type - The type of error encountered which triggered an error broadcast (See: PushManagerErrorConstants)
+ (NSString * _Nonnull)PushErrorType;

/// com.flybits.push.fetchedContent - The SDK object fetched via an API call (typically a Zone or Moment).
+ (NSString * _Nonnull)PushFetchedContent;

/// com.flybits.push.source - The source network of the push data (APNS or MQTT).
+ (NSString * _Nonnull)PushSourceNetwork;

/// com.flybits.push.sourceContent - Any additional content passed by the PushSource (i.e. the aps content of an APNS message).
+ (NSString * _Nonnull)SourceContent;

/// com.flybits.push.tokenError - Encountered error while attempting to update token on the Push server.
+ (NSString * _Nonnull)PushTokenError;

/// com.flybits.push.tokenUpdated - Token was successfully updated with the Push server.
+ (NSString * _Nonnull)PushTokenUpdated;

/// com.flybits.push.underlyingErrors - Any additional errors encountered during the request.
+ (NSString * _Nonnull)UnderlyingErrors;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A list of error codes that can be issued by the PushManager.
SWIFT_CLASS_NAMED("ErrorConstants")
@interface PushManagerErrorConstants : NSObject

/// com.flybits.push.error.fetchEmpty - An error indicating that no data was returned when a fetch was attempted.
+ (NSString * _Nonnull)FetchEmpty;

/// com.flybits.push.error.parse - An error indicating that a PushMessage was not able to be constructed with the push payload.
+ (NSString * _Nonnull)Parse;

/// com.flybits.push.error.payloadEmpty - An error indicating that the 'aps' portion of an APNS payload was missing.
+ (NSString * _Nonnull)PayloadEmpty;

/// com.flybits.push.error.payloadData - An error indicating that the 'data' portion of an APNS payload was missing.
+ (NSString * _Nonnull)PayloadData;

/// com.flybits.push.error.payloadFormat - An error indicating that the 'data' portion of an APNS payload was not formatted as a base64 encoded string.
+ (NSString * _Nonnull)PayloadFormat;

/// com.flybits.push.error.tokenRegistration - An error indicating that an issue was encountered while registering an APNS token with the Push server, check the value of the com.flybits.push.error.data element to get an NSError object
+ (NSString * _Nonnull)TokenRegistration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PushMessageCategory : NSInteger;
enum PushMessageAction : NSInteger;

SWIFT_CLASS("_TtC10FlybitsSDK11PushMessage")
@interface PushMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) NSInteger version;
@property (nonatomic, readonly) enum PushMessageCategory category;
@property (nonatomic, readonly) enum PushMessageEntity entity;
@property (nonatomic, readonly) enum PushMessageAction action;
@property (nonatomic, readonly, copy) NSString * _Nonnull rawAction;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull alert;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable body;
@property (nonatomic, readonly, copy) NSString * _Nonnull notificationType;
@property (nonatomic, readonly, copy) NSString * _Nonnull completeNotificationType;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;
+ (NSString * _Nonnull)NotificationType:(enum PushMessageEntity)entity action:(enum PushMessageAction)action;
+ (NSString * _Nonnull)CompleteNotificationType:(enum PushMessageEntity)entity action:(enum PushMessageAction)action rawAction:(NSString * _Nonnull)rawAction;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

typedef SWIFT_ENUM(NSInteger, PushMessageAction) {
  PushMessageActionCreated = 0,
  PushMessageActionModified = 1,
  PushMessageActionDeleted = 2,
  PushMessageActionLoggedIn = 3,
  PushMessageActionLoggedOut = 4,
  PushMessageActionStatusChanged = 5,
  PushMessageActionEntered = 6,
  PushMessageActionZoneEntered = 7,
  PushMessageActionExited = 8,
  PushMessageActionZoneExited = 9,
  PushMessageActionRoleModified = 10,
  PushMessageActionMomentModified = 11,
  PushMessageActionMomentRoleModified = 12,
  PushMessageActionMomentDeleted = 13,
  PushMessageActionRuleAssociated = 14,
  PushMessageActionRuleDisassociated = 15,
  PushMessageActionRuleUpdated = 16,
  PushMessageActionMomentRuleAssociated = 17,
  PushMessageActionMomentRuleDisassociated = 18,
  PushMessageActionMomentRuleUpdated = 19,
  PushMessageActionCustom = 20,
};

typedef SWIFT_ENUM(NSInteger, PushMessageCategory) {
  PushMessageCategoryCore = 0,
  PushMessageCategoryContext = 1,
  PushMessageCategoryLocation = 2,
  PushMessageCategoryMoment = 3,
  PushMessageCategorySocial = 4,
  PushMessageCategoryCustom = 5,
};

typedef SWIFT_ENUM(NSInteger, PushMessageEntity) {
  PushMessageEntityZone = 0,
  PushMessageEntityMomentInstance = 1,
  PushMessageEntityZoneMomentInstance = 2,
  PushMessageEntityUser = 3,
  PushMessageEntityTag = 4,
  PushMessageEntityRuleTemplate = 5,
  PushMessageEntityRule = 6,
  PushMessageEntityRequest = 7,
  PushMessageEntityBlock = 8,
  PushMessageEntityMessage = 9,
  PushMessageEntityCustom = 10,
};

enum PushQuerySortOrder : NSInteger;


/// Used for filtering the results of the PushRequest.NotificationHistory API.
SWIFT_CLASS("_TtC10FlybitsSDK9PushQuery")
@interface PushQuery : Query

/// The start date of the query (optional, default nil)
@property (nonatomic, strong) NSDate * _Nullable start;

/// The end date of the query (optional, default nil)
@property (nonatomic, strong) NSDate * _Nullable end;
@property (nonatomic) enum PushQuerySortOrder sortOrder;

/// Converts the query to key-value pairs for use in constructing a query string.
///
/// \returns  A dictionary containing the relevant key-value pairs to construct a query string.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This enum represents the sort orders for the PushQuery
typedef SWIFT_ENUM_NAMED(NSInteger, PushQuerySortOrder, "SortOrder") {

/// Results should be sorted in Ascending order
  PushQuerySortOrderAscending = 0,

/// Results should be sorted in Descending order
  PushQuerySortOrderDescending = 1,
};


/// The desired service level
typedef SWIFT_ENUM(NSInteger, PushServiceLevel) {

/// No push notifications will be received.
  PushServiceLevelNone = 0,

/// Foreground push notifications will be received via NSNotificationCenter
  PushServiceLevelForeground = 1,

/// Background push notifications will be received via NSNotificationCenter
  PushServiceLevelBackground = 2,

/// Foreground and Background push notifications will be received via NSNotificationCenter
  PushServiceLevelBoth = 3,
};


/// Defines a source for the origin of the PushMessage.
typedef SWIFT_ENUM(NSInteger, PushSource) {

/// An Apple Push Notification Service message.
  PushSourceAPNS = 0,

/// A MQ Telemetry Transport
  PushSourceMQTT = 1,
};


@class NSNotificationCenter;

SWIFT_CLASS("_TtC10FlybitsSDK12Reachability")
@interface Reachability : NSObject
@property (nonatomic, copy) void (^ _Nullable whenReachable)(Reachability * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable whenUnreachable)(Reachability * _Nonnull);
@property (nonatomic) BOOL reachableOnWWAN;
@property (nonatomic, strong) NSNotificationCenter * _Nonnull notificationCenter;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentReachabilityString;
- (nonnull instancetype)initWithReachabilityRef:(SCNetworkReachabilityRef _Nonnull)reachabilityRef OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithHostname:(NSString * _Nonnull)hostname error:(NSError * _Nullable * _Null_unspecified)error;
+ (Reachability * _Nullable)reachabilityForInternetConnectionAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
+ (Reachability * _Nullable)reachabilityForLocalWiFiAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (BOOL)startNotifierAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (void)stopNotifier;
- (BOOL)isReachable;
- (BOOL)isReachableViaWWAN;
- (BOOL)isReachableViaWiFi;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Represents Rule defined for Context engine to execute. Context engine evalues the rule to provide context.
///
/// For example, using a rule and condition, you can define,
/// "remind me to run when the weather is > 20 degree celsius every morning".
SWIFT_CLASS("_TtC10FlybitsSDK4Rule")
@interface Rule : NSObject

/// Name of the rule
@property (nonatomic, copy) NSString * _Nullable name;

/// Threadhold the rule has to pass in order to consider valid
@property (nonatomic) double threshold;

/// Conditions to be evaluted for this rule to become valid
@property (nonatomic, copy) NSArray<Condition *> * _Nullable conditions;

/// <#variables - what are possible variables?#>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable variables;

/// Unique identifier for the Rule
@property (nonatomic, copy) NSString * _Nullable identifier;

/// Failable initializer that returns a Rule based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SessionConfiguration;
enum SessionStatus : NSInteger;


/// Specific settings for current session. When a user logs into Flybits, Session.sharedInstance.currentUser is updated with that User object. So, at anytime you can query currently logged in user.
///
/// Also, you can point to which Flybits servers (Development, Production, etc.) that SDK points to by setting custom <code>SessionConfiguration
/// </code> by creating a new <code>Session
/// </code> class.
SWIFT_CLASS("_TtC10FlybitsSDK7Session")
@interface Session : NSObject

/// Singleton access to the session, has set option to build a session with a different configuration.
+ (Session * _Nonnull)sharedInstance;
+ (void)setSharedInstance:(Session * _Nonnull)session;
@property (nonatomic, strong) NSDictionary * _Null_unspecified configurableSettings;

/// SessionConfiguration used to configure the active session.
@property (nonatomic, readonly, strong) SessionConfiguration * _Nonnull configuration;

/// Creates a new Session with the provided SessionConfiguration, if none is provided, the default configuration is used.
///
/// \param configuration A <code>SessionConfiguration
/// </code>.
///
/// \param pushConfiguration A <code>PushConfiguration
/// </code>.
- (nonnull instancetype)initWithSessionConfiguration:(SessionConfiguration * _Nonnull)sessionConfiguration OBJC_DESIGNATED_INITIALIZER;

/// The user's JSON Web Token, used for authorization with Flybits servers.
@property (nonatomic, readonly, copy) NSString * _Nullable jwtToken;

/// Whether or not the session is connected / logged in
@property (nonatomic) BOOL isConnected;

/// The current status of the session (starts at .Disconnected)
@property (nonatomic) enum SessionStatus status;

/// Reference to the currently logged-in user.
@property (nonatomic, strong) User * _Nullable currentUser;

/// Whether or not the SDK should use the CoreLocationDataProvider to determine the user's location. Default value is false.
@property (nonatomic) BOOL trackLocation;

/// A reference to the PushManager
@property (nonatomic, strong) PushManager * _Nullable pushManager;

/// Whether or not the rememberMe token has been saved from a previous login.<br /><br /> true - rememberMe tokens is saved, no need to login<br /> false - rememberMe tokens are not saved -- login is required using SessionRequest.*Login*
- (BOOL)canLoginUsingSessionToken;

/// Removes the login tokens that was stored on login when rememberMe option was used.
- (void)clearLoginSessionToken;

/// Validates the Session with the server. Also updates the Utilities.flybitsDeviceId. Completion block will tell you if the session is valid or not, and if it's valid, the current user who is logged into the system. When valid is false or currentUser is nil then assume session is not valid and re-login.
- (FlybitsRequest * _Nonnull)validateSession:(void (^ _Nonnull)(BOOL valid, User * _Nullable currentUser, NSError * _Nullable error))completion;
@end

typedef SWIFT_ENUM(NSInteger, SessionStatus) {
  SessionStatusDisconnected = 0,
  SessionStatusDisconnecting = 1,
  SessionStatusConnecting = 2,
  SessionStatusConnected = 3,
};



/// Configuration that is used for current session. You can specify which Flybits server and API key to use as well as preferred localization to use when retrieving zones/moments.
SWIFT_CLASS("_TtC10FlybitsSDK20SessionConfiguration")
@interface SessionConfiguration : NSObject

/// APIKey can be set by developer or read from the flybits_sdk_configurables.json
@property (nonatomic, copy) NSString * _Null_unspecified APIKey;

/// List of NSLocale with languageCode properly set -- used for Localization -- so Zone, Moment can return their name, icon etc in the specific language you want. By Setting it to nil, will return the Zone, Moment properties in default language set by their creators. For more information, see LocalizedObject.
@property (nonatomic, copy) NSArray<NSLocale *> * _Nonnull preferredLocales;

/// Using preferredLocales, returns key-value pair that can be used with HTTP request headers. For example: ["Accept-Language":"en,fr,ta"] where en,fr,ta are set in preferredLocales in that order.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull preferredLanguagesHeaders;
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;

/// Sets the logging level and toggles whether or not colours are used in the output.
///
/// <em>NOTE: Colours are not currently supported as they cause a crash in Xcode.</em>
///
/// \param level Supported levels: .Verbose, .Debug, .Info, .Warning, .Error and .Severe
///
/// \param colors Use colours when logging (See <em>NOTE</em> above).
- (void)setupLogging:(NSInteger)level colors:(BOOL)colors;
@end



/// Tags are used to group/label Zones/Moments/Users. Using a TagQuery, all the objects that are associated with tags can be retrieved.
SWIFT_CLASS("_TtC10FlybitsSDK3Tag")
@interface Tag : NSObject <PushConfigurable>

/// Failable initializer that returns a Tag based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Identifier that uniquely identifies each tag in the system (identifier in Objective-C).
@property (nonatomic, copy) NSString * _Nonnull identifier;

/// Zones that are associated with this Tag.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull zoneID;

/// Zone Moments that are associated with this Tag.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull zoneMomentInstanceIDs;

/// Moment instances that are associated with this Tag.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull momentInstanceIDs;

/// Moments that are associated with this Tag.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull momentType;

/// All the users that are associated with this Tag.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull userID;

/// The image associated with this Tag.
@property (nonatomic, strong) Image * _Nullable image;

/// Localizations that is returned by server -- Tag.value.value! will return the localized value
@property (nonatomic, strong) NSDictionary * _Nullable localizations;

/// The MQTT route for this Tag
@property (nonatomic, readonly, copy) NSString * _Nonnull route;

/// Override to pretty-print the Tag's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Override to pretty-print the Tag's debug description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// The PushMessageEntity of this class (.Tag)
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;

/// Subscribes the current object to push.
- (void)subscribeToPush;

/// Unsubscribes the current object to push.
- (void)unsubscribeFromPush;
@end


@interface Tag (SWIFT_EXTENSION(FlybitsSDK))

/// Objective-C wrapper: Localized value of the tag or "name" of the Tag.
- (NSString * _Nullable)tagValue;

/// ObjectiveC wrapper: Localized value of the Tag returned for specific locale or nil if it doesn't exist.
- (NSString * _Nullable)localizedTagValue:(NSLocale * _Nonnull)locale;
@end



/// Manages the criteria to apply when searching for tags in Flybits server. A TagQuery is configured to retrieve tag objects that are associated with Zones/Moments/Users. Also, TagQuery can be used to search for Tags.
///
/// Sample Query: Get all the <code>Tag
/// </code>s associated with <code>Zone
/// </code>s where <code>id
/// </code> = 10, 12, 14, 16
///
/// let query = TagQuery()
/// query.zoneID = [10, 12, 14, 16]
///
/// Sample Query: Get all the <code>Tag
/// </code>s that have <code>userID
/// </code> 18 and <code>zoneID
/// </code> 120
///
/// let query = TagQuery()
/// query.zoneID = [120]
/// query.userID = [18]
/// query.type = [TagQuery.QueryType.ZONE, TagQuery.QueryType.USER]
///
/// Sample Query: Get all the <code>Tag
/// </code>s with value that begins with "<em>Aweso</em>"
///
/// let query = TagQuery()
/// query.searchValue = "Aweso"
///
/// // Executing the query:
/// TagActions.Query(query) { (json, error) -> Void in
/// print(json)
/// print(error)
/// }
SWIFT_CLASS("_TtC10FlybitsSDK8TagQuery")
@interface TagQuery : Query

/// Tags that are associated with zones with id in zoneID
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneID;

/// Tags that are associated with users with id in userID
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userID;

/// Tags that are associated with zone moments with id in momentID
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentID;

/// Tags that are associated with moment instances with id in momentType
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentType;

/// Detail of Tags with Tag.id in tagID
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagID;

/// Value of Tags that begins with searchValue
@property (nonatomic, copy) NSString * _Nullable searchValue;

/// Returns key-value pair for API requests.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// Convenience function to create a TagQuery with pre-populated search field.
///
/// \param searchQuery A search string.
///
/// \returns  A <code>TagQuery
/// </code> with a pre-populated search field.
+ (TagQuery * _Nonnull)search:(NSString * _Nonnull)searchQuery;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class defines a list of constants for properties that can be included/excluded in a given API request.
SWIFT_CLASS_NAMED("Constants")
@interface TagQueryConstants : NSObject

/// "defaultLanguage"
+ (NSString * _Nonnull)DefaultLanguage;

/// "id"
+ (NSString * _Nonnull)ID;

/// "isVisible"
+ (NSString * _Nonnull)IsVisible;

/// "localizations"
+ (NSString * _Nonnull)Localizations;

/// "zoneIds"
+ (NSString * _Nonnull)ZoneIDs;

/// "zoneMomentInstanceIds"
+ (NSString * _Nonnull)ZoneMomentInstanceIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface TagQuery (SWIFT_EXTENSION(FlybitsSDK))

/// Objective-C wrapper to privide access to TagQuery.QueryType.User.
+ (NSString * _Nonnull)TagQueryTypeUser;

/// Objective-C wrapper to privide access to TagQuery.QueryType.Moment.
+ (NSString * _Nonnull)TagQueryTypeMoment;

/// Objective-C wrapper to privide access to TagQuery.QueryType.Zone.
+ (NSString * _Nonnull)TagQueryTypeZone;

/// Add which types of tags to retrieve.
- (void)addQueryType:(NSArray<NSString *> * _Nonnull)items;

/// Reset TagQueryType so it returns everything defined by TagQueryType
- (void)removeAllQueryTypes;
@end



/// Gives fine control over fetching Tags using boolean expression (AND/OR) to express the query.
///
/// For example: Getting a zones which has tags 2 tags:
///
/// <code>let tagID1 = ...
/// let tagID2 = ...
/// 
/// let exp = BooleanQuery(tagID1).OR(tagID2)
/// let query = TagQueryExpressions()
/// query.tagIDQuery = exp
/// TagsRequest.Query(query) { (tags, pagination, error) -> Void in
///     if error == nil {
///         // handle error
///     } else {
///         // handle success
///     }
/// }.execute()
/// 
/// </code>
/// Also, expression is chainable so you can do
///
/// <code>let id1 = ...
/// .
/// .
/// .
/// let id6 = ...
/// 
/// let tagQuery = BooleanQuery(id1)
/// .OR(id2)
/// .AND([id3, id4], .AND)
/// .OR([id5, id6], .OR)
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK19TagQueryExpressions")
@interface TagQueryExpressions : TagQuery

/// Equivalent to TagQuery.momentType but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable momentTypeQuery;

/// Equivalent to TagQuery.momentID but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable momentIDQuery;

/// Equivalent to TagQuery.userID but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable userIDQuery;

/// Equivalent to TagQuery.zoneID but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable zoneIDQuery;

/// Equivalent to TagQuery.tagID but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable tagIDQuery;

/// Equivalent to TagQuery.searchValue but expressable using Boolean operators
@property (nonatomic, strong) BooleanQuery * _Nullable searchQuery;

/// overrides toDictionary() and adds all the properties declared here into the returning dictionary
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// You can set value for TagQueryExpressions.searchQuery or using TagQueryExpressions.addSearch(...) you can add items to search. Each call to addSearch behaves as 'boolean AND' operation.
///
/// \param value value to be searched
///
/// \param fields array of fields in Zone to be searched. i.e., ["name", "description"] will search both Zone's name and Zone's description property.
///
/// \returns  Returns the current TagQueryExpressions
- (TagQueryExpressions * _Nonnull)addSearch:(NSString * _Nonnull)value fields:(NSArray<NSString *> * _Nullable)fields;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UserProfile;


/// The User class represents a specific user and used to store information (fullname, avatar, date of birth, etc) about a person who has registered an account with Flybits.
SWIFT_CLASS("_TtC10FlybitsSDK4User")
@interface User : NSObject

/// The unique identifier of the User (identifier in Objective-C).
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;

/// The last time the user was modified on the server.
@property (nonatomic, readonly) int64_t lastModified;

/// The user's profile.
@property (nonatomic, readonly, strong) UserProfile * _Nullable profile;

/// All the devices user currently logged in.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull deviceIDs;

/// A list of unique Zone identifiers that have been favourited by this user.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull favouritedZoneIDs;

/// The type of user.
@property (nonatomic, readonly, copy) NSString * _Nullable userTypeId;

/// Failable initializer that returns an User object based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Saves the current user to the server (calls AccountRequest.UpdateDetails).
///
/// \param completion <code>User
/// </code>: The updated user object.<br />
/// <code>NSError
/// </code>: Any error encountered.
- (void)save:(void (^ _Nonnull)(User * _Nullable user, NSError * _Nullable error))completion;

/// Updates the user's details locally - call save() after updating to persist changes to the server.
///
/// \param dict An <code>NSDictionary
/// </code> containing key-value pairs of user details
- (void)updateDetails:(NSDictionary * _Nonnull)dict;

/// Updates the profile image of the user with a specified image.
///
/// \param image The new profile image object.
- (void)updateProfileImage:(Image * _Nonnull)image;

/// Updates the user's profile information.
///
/// \param newProfileInfo A profile information object
- (void)updateProfile:(UserProfile * _Nonnull)newProfileInfo;

/// Converts the user to a dictionary-style object for serialization to the server.
///
/// \returns  A dictionary-style object for serialization to the server.
- (NSDictionary<NSString *, id> * _Nullable)toDictionary;
- (void)disable;

/// Compares two Users for equality.
///
/// \param object Another <code>User
/// </code> (<code>NSObject.isEqual()
/// </code> is used if object is not a <code>User
/// </code>).
///
/// \returns  <code>true
/// </code> if two <code>User
/// </code>s have the same <code>id
/// </code>, <code>false
/// </code> otherwise.
- (BOOL)isEqual:(id _Nullable)object;

/// The User's hash value (used when treated as an NSObject).
@property (nonatomic, readonly) NSUInteger hash;

/// The User's hash value (used when treated as an NSObject).
@property (nonatomic, readonly) NSInteger hashValue;

/// Constructs a User from a cached object.
///
/// \param mo An <code>NSManagedObject
/// </code> version of the <code>User
/// </code>.
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents personal detail of User such as firstname, lastname, gender email etc.
SWIFT_CLASS("_TtC10FlybitsSDK11UserProfile")
@interface UserProfile : NSObject

/// First name
@property (nonatomic, copy) NSString * _Nullable firstname;

/// Last name
@property (nonatomic, copy) NSString * _Nullable lastname;

/// Image
@property (nonatomic, strong) Image * _Nullable image;

/// Metadata
@property (nonatomic, strong) NSDictionary * _Nullable metadata;

/// Email
@property (nonatomic, copy) NSString * _Nullable email;

/// Birth Date -- "yyyy-MM-dd'T'hh:mm:ssZ"
@property (nonatomic, copy) NSString * _Nullable birthDate;

/// The date this User profile was created
@property (nonatomic, strong) NSDate * _Nullable createdAt;

/// The date this User profile was modified
@property (nonatomic, strong) NSDate * _Nullable lastModifiedAt;

/// Creates a user profile from a list of key-value pairs.
///
/// \param dict An <code>NSDictionary
/// </code> containing a list of key-value pairs.
///
/// \returns  A new <code>UserProfile
/// </code> object.
+ (UserProfile * _Nonnull)userProfilefromDictionary:(NSDictionary * _Nonnull)dict;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dictionary;
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Converts the user to a dictionary-style object for serialization to the server.
///
/// \returns  A dictionary-style object for serialization to the server.
- (NSDictionary<NSString *, id> * _Nullable)toDictionary;

/// Updates the user's profile with a list of key-value pairs.
///
/// <em>NOTE: Returns a <code>UserProfile
/// </code> object to support 'chaining'.</em>
///
/// \param dict An <code>NSDictionary
/// </code> containing a list of key-value pairs.
///
/// \returns  Updates and returns the <code>UserProfile
/// </code> object.
- (UserProfile * _Nonnull)updateFromDictionary:(NSDictionary * _Nonnull)dict;

/// Updates the user's profile with an existing UserProfile object.
///
/// <em>NOTE: Returns a <code>UserProfile
/// </code> object to support 'chaining'.</em>
///
/// \param newProfile A <code>UserProfile
/// </code> object to use for the update.
///
/// \returns  Updates and returns the <code>UserProfile
/// </code> object.
- (UserProfile * _Nonnull)updateFromProfile:(UserProfile * _Nonnull)newProfile;
@end



/// Using UsersQuery, you can search for Users who are registered with Flybits. A User can be searched by all the types defined in UsersQuery.UserSearchType.
///
/// Example -- Search for users with id "USERID1", "USERID2", "USERID3" and search their lastname or email for the keyword "gma" and only return first 2 responses.
///
/// <code>let query = UsersQuery(limit:2, offset:0);
/// 
/// // only search lastname and email
/// query.searchFields = [UserSearchType.Lastname, UserSearchType.Email]
/// 
/// // value to search
/// query.searchString = "gma"
/// 
/// // only search users with `userIDs`, default is nil
/// query.userIDs = ["USERID1", "USERID2", "USERID3"]
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK10UsersQuery")
@interface UsersQuery : Query

/// Only search for users with userIDs
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIDs;

/// Keyword that should be searched
@property (nonatomic, copy) NSString * _Nullable searchString;

/// Returns key-value pair for API requests.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class defines a list of constants for properties that can be included/excluded in a given API request.
SWIFT_CLASS_NAMED("Constants")
@interface UsersQueryConstants : NSObject

/// "activeUserRelationship"
+ (NSString * _Nonnull)ActiveUserRelationship;

/// "createdAt"
+ (NSString * _Nonnull)CreatedAt;

/// "deviceIds"
+ (NSString * _Nonnull)DeviceIDs;

/// "email"
+ (NSString * _Nonnull)Email;

/// "favoritedZoneIds"
+ (NSString * _Nonnull)FavouritedZoneIDs;

/// "firstName"
+ (NSString * _Nonnull)Firstname;

/// "icon"
+ (NSString * _Nonnull)Icon;

/// "id"
+ (NSString * _Nonnull)ID;

/// "lastModifiedAt"
+ (NSString * _Nonnull)LastModifiedAt;

/// "lastName"
+ (NSString * _Nonnull)Lastname;

/// "userTypeId"
+ (NSString * _Nonnull)UserTypeID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A set of utilities to access common iOS properties.
SWIFT_CLASS_NAMED("Utilities")
@interface FlybitsUtilities : NSObject

/// Determines whether or not this is a simulator build.
+ (BOOL)IsSimulator;

/// The Flybits SDK version number in the Major.Minor.Patch format.
+ (NSString * _Nonnull)SDKVersion;

/// The Vendor UUID returned from UIDevice.currentDevice().identifierForVendor (handles nullable type)
+ (NSString * _Nonnull)vendorUUID;
+ (NSString * _Nullable)flybitsDeviceID;
+ (void)setFlybitsDeviceID:(NSString * _Nullable)newValue;
+ (NSDictionary<NSString *, id> * _Nonnull)CreateNSErrorUserInfo:(NSString * _Nonnull)description failure:(NSString * _Nullable)failure recovery:(NSString * _Nullable)recovery;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Adds visible property to Tag object, letting user decide that if this tag shoud be displayed to users.
SWIFT_CLASS("_TtC10FlybitsSDK10VisibleTag")
@interface VisibleTag : Tag

/// Whether or not this VisibleTag should be displayed in the UI.
@property (nonatomic) BOOL visibility;

/// Failable initializer that returns a VisibleTag object based on the supplied representation.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)rep OBJC_DESIGNATED_INITIALIZER;

/// Override to pretty-print the VisibleTag's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Override to pretty-print the VisibleTag's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end



/// The Zone class represents an object or thing that can provide group of services/contexts to users. Zone class stores information of a Zone such as localized name, description, icon as well as metadata, location/shapes and tags.
///
/// <code>Zone
/// </code> also gives you powerful analytics such as how many people are connected to it, favourited it and how long a user is connected to it.
///
/// A <code>Zone
/// </code> has different privacy/permission viewing levels. A public zone can be viewed by anyone. A protected zone needs a password --obtainable from a <code>Zone
/// </code> owner/manager-- to connect to it. A private <code>Zone
/// </code> needs a passcode and the exact <code>Zone
/// </code> name need to be entered by user to connect to it. Private <code>Zone
/// </code>s are not visible to other users, you require explicit permission to view it in the case where you manage/own the <code>Zone
/// </code>, otherwise you require the name and password.
///
/// Example of a <code>Zone
/// </code>:
///
/// A landmark can be represented by a <code>Zone
/// </code> with <code>location/shapes
/// </code> defining where they are in the globe. That <code>Zone
/// </code> then can have <code>Moment
/// </code>s which provides useful services to users. You can then query for zones that are at given latitude and longitude with certain radius.
///
/// You can also obtain some analytics from the <code>Zone
/// </code>, including: total time spent, total user visits, favourite counts, manager counts, role counts, tag counts and moment counts.
///
/// Localization is also available for few properties including name, icon and description.
SWIFT_CLASS("_TtC10FlybitsSDK4Zone")
@interface Zone : NSObject <PushConfigurable>

/// Unique identifier -- String version of UUID, (identifier in Objective-C).
@property (nonatomic, copy) NSString * _Nonnull identifier;

/// The User who created this zone -- User.id
@property (nonatomic, copy) NSString * _Nonnull creatorId;

/// Is the current user within the boundary of the shape defined by Zone.shapes
@property (nonatomic, readonly) BOOL insideZone;

/// Whether or not the Zone has been added as a favourite by the current user.
@property (nonatomic) BOOL favourited;

/// Distance to the calculated center of the zone from ZonesQuery.location.
@property (nonatomic, readonly) float distanceToCenter;

/// Distance to the edge of the zone from ZonesQuery.location.
@property (nonatomic, readonly) float distanceToEdge;

/// Whether or not the Zone is published.
@property (nonatomic) BOOL published;

/// The timezone. Default Value = ""
@property (nonatomic, copy) NSString * _Nonnull timezone;

/// The colour. Default Value = ""
@property (nonatomic, copy) NSString * _Nonnull color;

/// A list of images delimited by size.
@property (nonatomic, strong) Image * _Nonnull image;

/// A list of images delimited by size.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;

/// Additional metadata that can be set from management console
@property (nonatomic, strong) Metadata * _Nullable metadata;

/// Array of CLLocation objects used to define the overall geoshape.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nullable shapes;

/// Geocoded latitude, longitude of the property Zone.address
@property (nonatomic) CLLocationCoordinate2D addressCoordinate;

/// A postal address defined by the zone creator which best represents the Zone.
@property (nonatomic, copy) NSString * _Nullable address;

/// Contains the list of moment instance identifiers in this Zone. Check Zone.totalMomentInstanceCount to get the total.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable momentInstanceIDs;

/// Most of the time, foo.value or foo.valueForLocale will suffice but if there is a custom property that has localization but SDK doesn't have custom getter, then use this.
@property (nonatomic, strong) NSDictionary * _Nullable localizations;

/// The PushMessageEntity of this class (.Zone)
@property (nonatomic, readonly) enum PushMessageEntity pushEntityType;

/// The date this Zone was created
@property (nonatomic, strong) NSDate * _Nullable createdAt;

/// The date this Zone was modified
@property (nonatomic, strong) NSDate * _Nullable lastModifiedAt;

/// The default language of the Zone
@property (nonatomic, strong) NSLocale * _Nullable defaultLanguage;

/// The MQTT route for this Zone
@property (nonatomic, readonly, copy) NSString * _Nonnull route;

/// Creates an empty Zone object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Creates a Zone from a raw server response.
///
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
- (nullable instancetype)initWithResponse:(NSHTTPURLResponse * _Nonnull)response representation:(id _Nonnull)representation OBJC_DESIGNATED_INITIALIZER;

/// Updates the current Zone with a JSON Object returned by the server. Zone.id cannot be updated with this -- only by creating a new can the id be changed. It will check for every other propertie, if it has a property, then it will update the property with the new value. If dict doesn't have a property, that property is left untouched -- will have the previous value.
///
/// \param dict An <code>NSDictionary
/// </code> containing a list of key-value pairs.
///
/// \returns  Updates and returns the <code>Zone
/// </code> object -- useful for chaining.
- (Zone * _Nonnull)updateFromDictionary:(NSDictionary * _Nonnull)dict;

/// Override to pretty-print the Zone's description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Override to pretty-print the Zone's debugDescription
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;

/// The Zone's hash value (used when treated as an NSObject).
@property (nonatomic, readonly) NSUInteger hash;

/// Compares two Zones for equality.
///
/// \param object Another <code>Zone
/// </code> (<code>NSObject.isEqual()
/// </code> is used if object is not a <code>Zone
/// </code>).
///
/// \returns  <code>true
/// </code> if two <code>Zone
/// </code>s have the same <code>id
/// </code>, <code>false
/// </code> otherwise.
- (BOOL)isEqual:(id _Nullable)object;

/// Constructs a Zone from a cached object.
///
/// \param mo An <code>NSManagedObject
/// </code> version of the <code>Zone
/// </code>.
- (nullable instancetype)initWithMo:(NSManagedObject * _Nonnull)mo OBJC_DESIGNATED_INITIALIZER;

/// Subscribes the current object to push.
- (void)subscribeToPush;

/// Subscribes the current object to push.
- (void)unsubscribeFromPush;
@end


@interface Zone (SWIFT_EXTENSION(FlybitsSDK))

/// Objective-C wrapper - Get Zone's name in the order of preferredLocale or defaultLocale.
- (NSString * _Nullable)zoneName;

/// Objective-C wrapper - Get Zone's localized name for the specific locale with languageCode. Default value = "".
- (NSString * _Nullable)localizedName:(NSLocale * _Nonnull)locale;

/// Objective-C wrapper - Get Zone's description in the order of preferredLocale or defaultLocale.
- (NSString * _Nullable)zoneDesc;

/// Objective-C wrapper - Get Zone's localized name for the specific locale with languageCode. Default value = "".
- (NSString * _Nullable)localizedZoneDescription:(NSLocale * _Nonnull)locale;

/// Objective-C wrapper - Get Zone's image
- (Image * _Nullable)zoneImage:(enum ImageSize)size;

/// Zone is public and can be viewed by anyone.
+ (NSString * _Nonnull)ZonePrivacyLevelPublic;

/// Zone is protected, need a passcode to view the Zone. You can obtain the passcode from Zone owner/manager.
+ (NSString * _Nonnull)ZonePrivacyLevelProtected;

/// Zone is private, you will never see this type of Zone.
+ (NSString * _Nonnull)ZonePrivacyLevelPrivate;

/// Viewing privacy / permission of this zone by a user. Possible privacy levels are can be found in Zone.ZonePrivacyLevel
@property (nonatomic, copy) NSString * _Nullable privacyLevel;

/// Returns the default locale defined by Zone owner; Can be null if you exclude defaultLocale when querying Zones
- (NSLocale * _Nullable)defaultLocale;
@end


@interface Zone (SWIFT_EXTENSION(FlybitsSDK))

/// Analytics - How long users have stayed connected to this zone. Default Value = 0.0
@property (nonatomic, readonly) float totalTimeSpent;

/// Analytics - How many unique users have entered this zone. Default Value = 0.0
@property (nonatomic, readonly) float totalUserVisits;

/// Analytics - How many people have favourited this zone. Default Value = 0.0
@property (nonatomic, readonly) NSInteger favouriteCount;

/// Analytics - Total number of managers managing this zone
@property (nonatomic, readonly) NSInteger managerCount;

/// Analytics - Total number of user roles this zone has
@property (nonatomic, readonly) NSInteger roleCount;

/// Analytics - Total number of tags associated with this zone
@property (nonatomic, readonly) NSInteger tagCount;

/// Analytics - Total number of moment instances that are contained by this zone
@property (nonatomic, readonly) NSInteger zoneMomentCount;
@end



/// Allows for custom criteria when retrieving a list of Zones using ZoneRequest.Query(...).
///
/// When querying for <code>Zone
/// </code>s, if you exclude certain fields from the response by
/// specifying <code>ZonesQuery.excludes = [ ... ]
/// </code>, value for those excluded properties will be
/// set to their default values. For example, if you excluded <code>localization
/// </code> from <code>ZonesQuery
/// </code>,
/// then all <code>Zone.name
/// </code> will have an empty <code>String
/// </code> ("") as the default value.
///
/// <em>NOTE: For performance reason, limit might be different than what you specified.</em>
///
/// Example: Retrieve all the <code>Zone
/// </code>s created by a specific list of users.
///
/// <code>// Swift
/// let query = ZonesQuery(limit:500, offset:0)
/// query.userIDs = ["USERID1", "USERID2", "USERID2"]
/// 
/// // Objective-C
/// ZonesQuery *query1 = [[ZonesQuery alloc] initWithLimit:NSUIntegerMax offset:0];
/// query.userIDs = @[@"USERID1", @"USERID2", @"USERID2"];
/// 
/// </code>
/// Example: Retrieving <code>Zone
/// </code>s within 5km around a latitude, longitude.
///
/// <code>// Swift
/// let query = ZonesQuery(limit:500, offset:0)
/// query.location = CLLocation(latitude: 43.333333, longitude: -79.666666)
/// query.distance = CLLocationDistance(500)
/// 
/// // Objective-C
/// ZonesQuery *query1 = [[ZonesQuery alloc] initWithLimit:NSUIntegerMax offset:0];
/// query.userIDs = @[@"USERID1", @"USERID2", @"USERID2"];
/// 
/// </code>
/// Example: Retrieving <code>Zone
/// </code>s within 5km around a latitude, longitude that are favourited by me (the current <code>User
/// </code>).<br />
/// <em>NOTE: You have to get tagID first by using <code>TagRequest
/// </code> and then pass those IDs in the query below</em>
///
/// <code>let query = ZonesQuery(limit:500, offset:0)
/// query.location = CLLocation(latitude: 43.333333, longitude: -79.666666)
/// query.distance = CLLocationDistance(500)
/// query.favourites = true
/// query.tagIDs = ["TAGID1", "TAGID2", "TAGID3"]
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK10ZonesQuery")
@interface ZonesQuery : Query

/// Zones containing zoneIDs.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable zoneIDs;

/// Zones created by userIDs.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable userIDs;

/// Zones managed by managerIDs.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable managerIDs;

/// Zones that have tags added to them with tagIDs.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tagIDs;

/// Zones around certain location with latitude, longitude.
@property (nonatomic, strong) CLLocation * _Nullable location;

/// Search token (specify what properties to search by using ZonesQuery.searchFields).
@property (nonatomic, copy) NSString * _Nullable search;

/// Response should be ordered by the following model property name.
@property (nonatomic, copy) NSString * _Nullable orderBy;

/// Zones in certain timezone
@property (nonatomic, copy) NSString * _Nullable timezone;

/// Zones that are favourited by users in favouritedByUserIDs.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull favouritedByUserIDs;

/// Returns a copy of this Query
- (ZonesQuery * _Nonnull)duplicate;

/// Returns key-value pair for API requests.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class defines a list of constants for properties that can be included/excluded in a given API request.
SWIFT_CLASS_NAMED("Constants")
@interface ZonesQueryConstants : NSObject

/// "activeUserRelationship"
+ (NSString * _Nonnull)ActiveUserRelationship;

/// "address"
+ (NSString * _Nonnull)Address;

/// "addressCoordinates"
+ (NSString * _Nonnull)AddressCoordinates;

/// "analytics"
+ (NSString * _Nonnull)Analytics;

/// "color"
+ (NSString * _Nonnull)Color;

/// "createdAt"
+ (NSString * _Nonnull)CreatedAt;

/// "creatorID"
+ (NSString * _Nonnull)CreatorID;

/// "defaultLanguage"
+ (NSString * _Nonnull)DefaultLanguage;

/// "id"
+ (NSString * _Nonnull)ID;

/// "isPublished"
+ (NSString * _Nonnull)IsPublished;

/// "lastModifiedAt"
+ (NSString * _Nonnull)LastModifiedAt;

/// "localizations"
+ (NSString * _Nonnull)Localizations;

/// "metadata"
+ (NSString * _Nonnull)Metadata;

/// "privacyLevel"
+ (NSString * _Nonnull)PrivacyLevel;

/// "shapes"
+ (NSString * _Nonnull)Shapes;

/// "tagIds"
+ (NSString * _Nonnull)TagIDs;

/// "timezone"
+ (NSString * _Nonnull)Timezone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZonesQuery (SWIFT_EXTENSION(FlybitsSDK))

/// Created by me - set to true, if you want to get Zones that are created by you; default is nil
@property (nonatomic, strong) NSNumber * _Nullable zonesCreatedByMe;

/// Managed by me - set to true if you want to get Zones that are managed by you; default is nil
@property (nonatomic, strong) NSNumber * _Nullable zonesManagedByMe;

/// Favourites - Set to true if you want to get your favourited zones; default is nil
@property (nonatomic, strong) NSNumber * _Nullable favouritedZones;

/// Distance - Get zones that are within certain meters distanceFromLocation from location; default is nil
@property (nonatomic, strong) NSNumber * _Nullable distanceFromLocation;

/// Objective-C wrapper to access ZonesQuery.SearchField.NAME.
+ (NSString * _Nonnull)SearchQueryFieldName;

/// Objective-C wrapper to access ZonesQuery.SearchField.DESCRIPTION.
+ (NSString * _Nonnull)SearchQueryFieldDescription;

/// Objective-C wrapper to access ZonesQuery.SearchField.PUBLISHED.
+ (NSString * _Nonnull)SearchQueryFieldPublished;

/// Objective-C wrapper to update the list of search fields.
- (void)setSearchFields:(NSArray<NSString *> * _Nullable)fields;
@end



/// Gives fine control over fetching Zones using boolean expression (AND/OR) to express the query. Setting somne of the properties will ignore/overrides the values set by some properties from the parent class -- ZonesQuery. For example, if favorites is set to true then it will be ignored when you also set favoritedUserIDQuery.
///
/// For example: Getting a zones which has tags 2 tags:
///
/// <code>let tagID1 = ...
/// let tagID2 = ...
/// 
/// let tagQuery = BooleanQuery([tagID1, tagID2], .AND)
/// 
/// let query = ZonesQueryExpressions()
/// query.tagIDQuery = tagQuery
/// 
/// ZoneRequest.Query(query, completion: { (zones, pagination, error) -> Void in
///     print(zones)
///     print(error)
/// }).execute()
/// 
/// </code>
/// Also, expression is chainable so you can do
///
/// <code>let id1 = ...
///  .
///  .
///  .
/// let id6 = ...
/// 
/// 
/// let tagQuery = BooleanQuery(id1)
/// .OR(id2)
/// .AND([id3, id4], .AND)
/// .OR([id5, id6], .OR)
/// 
/// </code>
SWIFT_CLASS("_TtC10FlybitsSDK21ZonesQueryExpressions")
@interface ZonesQueryExpressions : ZonesQuery

/// Query for Zones based on Zone.id. Overrides ZonesQueryExpression.zoneIDs.
@property (nonatomic, strong) BooleanQuery * _Nullable zoneIDQuery;

/// Query for Zones based on all the associated tags to the zones with Tag.id. Overrides ZonesQueryExpression.tagIDs.
@property (nonatomic, strong) BooleanQuery * _Nullable tagIDQuery;

/// Query for Zones based on users that have permission to manage the zones with User.id. Overrides ZonesQueryExpression.managerIDs.
@property (nonatomic, strong) BooleanQuery * _Nullable managerIDQuery;

/// Query for Zones based on users who has favourited with User.id. Overrides ZonesQueryExpression.favouritedByUserIDs and ZonesQueryExpression.favorites
@property (nonatomic, strong) BooleanQuery * _Nullable favoritedUserIDQuery;

/// Query for Zones with userIDs to find all the `Zone's they have created. Overrides ZonesQueryExpression.userIDs
@property (nonatomic, strong) BooleanQuery * _Nullable userIDQuery;

/// Setting value for this property will ignore the ZonesQueryExpression.search property.
@property (nonatomic, strong) BooleanQuery * _Nullable searchQuery;

/// Zones within the boundary of time zone; i.e., 'America/Toronto'
@property (nonatomic, strong) BooleanQuery * _Nullable timeZoneQuery;

/// Returns key-value pair for API requests.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Null_unspecified)error;

/// You can set value for ZonesQueryExpression.searchQuery or using ZonesQueryExpression.addSearch(...) you can add items to search. Each call to addSearch behaves as 'boolean AND' operation.
///
/// \param value value to be searched
///
/// \param fields array of fields in Zone to be searched. i.e., ["name", "description"] will search both Zone's name and Zone's description property.
///
/// \returns  Returns the current ZonesQueryExpression
- (ZonesQueryExpressions * _Nonnull)addSearch:(NSString * _Nonnull)value fields:(NSArray<NSString *> * _Nullable)fields;
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUUID;

SWIFT_CLASS("_TtC10FlybitsSDK7iBeacon")
@interface iBeacon : Beacon
@property (nonatomic, readonly, copy) NSString * _Nonnull majorID;
@property (nonatomic, readonly, copy) NSString * _Nonnull minorID;
@property (nonatomic, readonly, strong) NSUUID * _Nonnull uuid;
+ (NSString * _Nonnull)beaconType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMajorID:(NSString * _Nonnull)majorID minorID:(NSString * _Nonnull)minorID uuid:(NSUUID * _Nonnull)uuid distance:(CLLocationDistance)distance RSSI:(NSInteger)RSSI batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
@property (nonatomic, readonly) NSInteger hashValue;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object;
@end



/// The iBeaconDataProvider provides information about iBeacons in the vicinity of the device.
SWIFT_CLASS("_TtC10FlybitsSDK19iBeaconDataProvider")
@interface iBeaconDataProvider : BeaconDataProvider <CoreLocationDataProviderDelegate>
- (void)startRangingBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)startMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopRangingBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;

/// Retrieves information about active beacons including distance and identifying data.
///
/// \param completion A completion called by the <code>ContextManager
/// </code> to update the latest data.
- (void)dataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable error))completion;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationDataProvider:(CoreLocationDataProvider * _Nonnull)dataProvider rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, iBeaconOptions) {
  iBeaconOptionsMonitoring = 0,
  iBeaconOptionsRanging = 1,
};

#pragma clang diagnostic pop
